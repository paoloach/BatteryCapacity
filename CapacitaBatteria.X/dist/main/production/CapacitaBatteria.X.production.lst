

Microchip Technology PIC18 LITE Macro Assembler V1.35 build -356382666 
                                                                                               Tue Oct 20 16:42:21 2015

Microchip Technology Omniscient Code Generator v1.35 (Free mode) build 201507080246
     1                           	processor	18F4550
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     8                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
     9                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
    10                           	psect	text0,global,reloc=2,class=CODE,delta=1
    11                           	psect	text1,global,reloc=2,class=CODE,delta=1
    12                           	psect	text2,global,reloc=2,class=CODE,delta=1
    13                           	psect	text3,global,reloc=2,class=CODE,delta=1
    14                           	psect	text4,global,reloc=2,class=CODE,delta=1
    15                           	psect	text5,global,reloc=2,class=CODE,delta=1
    16                           	psect	text6,global,reloc=2,class=CODE,delta=1
    17                           	psect	text7,global,reloc=2,class=CODE,delta=1
    18                           	psect	text8,global,reloc=2,class=CODE,delta=1
    19                           	psect	text9,global,reloc=2,class=CODE,delta=1
    20                           	psect	text10,global,reloc=2,class=CODE,delta=1
    21                           	psect	text11,global,reloc=2,class=CODE,delta=1
    22                           	psect	text12,global,reloc=2,class=CODE,delta=1
    23                           	psect	text13,global,reloc=2,class=CODE,delta=1
    24                           	psect	text14,global,reloc=2,class=CODE,delta=1
    25                           	psect	text15,global,reloc=2,class=CODE,delta=1
    26                           	psect	intcodelo,global,reloc=2,class=CODE,delta=1
    27                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    28                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    29                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
    30                           	psect	rparam,global,class=COMRAM,space=1,delta=1
    31                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    32  0000                     _ADRES	set	4035
    33  0000                     _ADCON0bits	set	4034
    34  0000                     _ADCON1bits	set	4033
    35  0000                     _ADCON2bits	set	4032
    36  0000                     _LATEbits	set	3981
    37  0000                     _PIR1bits	set	3998
    38  0000                     _PORTD	set	3971
    39  0000                     _PORTDbits	set	3971
    40  0000                     _TRISD	set	3989
    41  0000                     _TRISE0	set	31920
    42  0000                     _TRISE1	set	31921
    43  0000                     _TRISE2	set	31922
    44                           
    45                           	psect	smallconst
    46  000800                     __psmallconst:
    47                           	opt stack 0
    48  000800  00                 	db	0
    49  000801                     STR_2:
    50  000801  6C                 	db	108	;'l'
    51  000802  69                 	db	105	;'i'
    52  000803  6E                 	db	110	;'n'
    53  000804  65                 	db	101	;'e'
    54  000805  31                 	db	49	;'1'
    55  000806  00                 	db	0
    56  000807                     STR_3:
    57  000807  6C                 	db	108	;'l'
    58  000808  69                 	db	105	;'i'
    59  000809  6E                 	db	110	;'n'
    60  00080A  65                 	db	101	;'e'
    61  00080B  32                 	db	50	;'2'
    62  00080C  00                 	db	0
    63  00080D                     STR_1:
    64  00080D  6D                 	db	109	;'m'
    65  00080E  41                 	db	65	;'A'
    66  00080F  2F                 	db	47
    67  000810  68                 	db	104	;'h'
    68  000811  00                 	db	0
    69                           
    70                           ; #config settings
    71  000812  00                 	db	0	; dummy byte at the end
    72  0000                     
    73                           	psect	cinit
    74  000D78                     __pcinit:
    75                           	opt stack 0
    76  000D78                     start_initialization:
    77                           	opt stack 0
    78  000D78                     __initialization:
    79                           	opt stack 0
    80                           
    81                           ; Clear objects allocated to BANK0 (44 bytes)
    82  000D78  EE00  F060         	lfsr	0,__pbssBANK0
    83  000D7C  0E2C               	movlw	44
    84  000D7E                     clear_0:
    85  000D7E  6AEE               	clrf	postinc0,c
    86  000D80  06E8               	decf	wreg,f,c
    87  000D82  E1FD               	bnz	clear_0
    88  000D84                     end_of_initialization:
    89                           	opt stack 0
    90  000D84                     __end_of__initialization:
    91                           	opt stack 0
    92  000D84  903F               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
    93  000D86  923F               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
    94  000D88  0E00               	movlw	low (__Lmediumconst shr (0+16))
    95  000D8A  6EF8               	movwf	tblptru,c
    96  000D8C  0100               	movlb	0
    97  000D8E  EF0A  F004         	goto	_main	;jump to C main() function
    98                           tblptru	equ	0xFF8
    99                           postinc0	equ	0xFEE
   100                           wreg	equ	0xFE8
   101                           
   102                           	psect	bssBANK0
   103  000060                     __pbssBANK0:
   104                           	opt stack 0
   105  000060                     _totCur:
   106                           	opt stack 0
   107  000060                     	ds	4
   108  000064                     _iterLine1:
   109                           	opt stack 0
   110  000064                     	ds	2
   111  000066                     _i:
   112                           	opt stack 0
   113  000066                     	ds	1
   114  000067                     _capacity:
   115                           	opt stack 0
   116  000067                     	ds	20
   117  00007B                     _strLine1:
   118                           	opt stack 0
   119  00007B                     	ds	17
   120                           tblptru	equ	0xFF8
   121                           postinc0	equ	0xFEE
   122                           wreg	equ	0xFE8
   123                           
   124                           	psect	cstackBANK0
   125  00008C                     __pcstackBANK0:
   126                           	opt stack 0
   127  00008C                     ltoa@buf:
   128                           	opt stack 0
   129                           
   130                           ; 2 bytes @ 0x0
   131  00008C                     	ds	2
   132  00008E                     ltoa@val:
   133                           	opt stack 0
   134                           
   135                           ; 4 bytes @ 0x2
   136  00008E                     	ds	4
   137  000092                     ltoa@base:
   138                           	opt stack 0
   139                           
   140                           ; 2 bytes @ 0x6
   141  000092                     	ds	2
   142  000094                     main@lenCap:
   143                           	opt stack 0
   144                           
   145                           ; 2 bytes @ 0x8
   146  000094                     	ds	2
   147  000096                     main@width:
   148                           	opt stack 0
   149                           
   150                           ; 2 bytes @ 0xA
   151  000096                     	ds	2
   152                           tblptru	equ	0xFF8
   153                           postinc0	equ	0xFEE
   154                           wreg	equ	0xFE8
   155                           
   156                           	psect	cstackCOMRAM
   157  000001                     __pcstackCOMRAM:
   158                           	opt stack 0
   159  000001                     ??_low_isr:
   160  000001                     
   161                           ; 0 bytes @ 0x0
   162  000001                     	ds	17
   163  000012                     ??_high_isr:
   164                           
   165                           ; 0 bytes @ 0x11
   166  000012                     	ds	14
   167  000020                     ?_strlen:
   168                           	opt stack 0
   169  000020                     ?___lldiv:
   170                           	opt stack 0
   171  000020                     ?___llmod:
   172                           	opt stack 0
   173  000020                     waitNotBusy@res:
   174                           	opt stack 0
   175  000020                     strcat@to:
   176                           	opt stack 0
   177  000020                     strlen@s:
   178                           	opt stack 0
   179  000020                     ___lldiv@dividend:
   180                           	opt stack 0
   181  000020                     ___llmod@dividend:
   182                           	opt stack 0
   183                           
   184                           ; 4 bytes @ 0x1F
   185  000020                     	ds	1
   186  000021                     writeDataLCD@data:
   187                           	opt stack 0
   188  000021                     writeCmdLCD@data:
   189                           	opt stack 0
   190                           
   191                           ; 1 bytes @ 0x20
   192  000021                     	ds	1
   193  000022                     ??_strlen:
   194  000022                     ??_waitForLCDStart:
   195  000022                     writeLCD@str:
   196                           	opt stack 0
   197  000022                     strcat@from:
   198                           	opt stack 0
   199                           
   200                           ; 2 bytes @ 0x21
   201  000022                     	ds	2
   202  000024                     strcat@cp:
   203                           	opt stack 0
   204  000024                     strlen@cp:
   205                           	opt stack 0
   206  000024                     ___lldiv@divisor:
   207                           	opt stack 0
   208  000024                     ___llmod@divisor:
   209                           	opt stack 0
   210                           
   211                           ; 4 bytes @ 0x23
   212  000024                     	ds	4
   213  000028                     ___llmod@counter:
   214                           	opt stack 0
   215  000028                     ___lldiv@quotient:
   216                           	opt stack 0
   217                           
   218                           ; 4 bytes @ 0x27
   219  000028                     	ds	4
   220  00002C                     ___lldiv@counter:
   221                           	opt stack 0
   222                           
   223                           ; 1 bytes @ 0x2B
   224  00002C                     	ds	1
   225  00002D                     ultoa@buf:
   226                           	opt stack 0
   227                           
   228                           ; 2 bytes @ 0x2C
   229  00002D                     	ds	2
   230  00002F                     ultoa@val:
   231                           	opt stack 0
   232                           
   233                           ; 4 bytes @ 0x2E
   234  00002F                     	ds	4
   235  000033                     ultoa@base:
   236                           	opt stack 0
   237                           
   238                           ; 2 bytes @ 0x32
   239  000033                     	ds	2
   240  000035                     ultoa@v:
   241                           	opt stack 0
   242                           
   243                           ; 4 bytes @ 0x34
   244  000035                     	ds	4
   245  000039                     ultoa@c:
   246                           	opt stack 0
   247                           
   248                           ; 1 bytes @ 0x38
   249  000039                     	ds	1
   250  00003A                     ltoa@cp:
   251                           	opt stack 0
   252                           
   253                           ; 2 bytes @ 0x39
   254  00003A                     	ds	2
   255  00003C                     ??_main:
   256                           
   257                           ; 0 bytes @ 0x3B
   258  00003C                     	ds	3
   259                           tblptru	equ	0xFF8
   260                           postinc0	equ	0xFEE
   261                           wreg	equ	0xFE8
   262                           
   263 ;;
   264 ;;Main: autosize = 0, tempsize = 3, incstack = 0, save=0
   265 ;;
   266 ;; *************** function _main *****************
   267 ;; Defined at:
   268 ;;		line 41 in file "main.c"
   269 ;; Parameters:    Size  Location     Type
   270 ;;		None
   271 ;; Auto vars:     Size  Location     Type
   272 ;;  width           2   10[BANK0 ] int 
   273 ;;  lenCap          2    8[BANK0 ] unsigned int 
   274 ;; Return value:  Size  Location     Type
   275 ;;		None               void
   276 ;; Registers used:
   277 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
   278 ;; Tracked objects:
   279 ;;		On entry : 0/0
   280 ;;		On exit  : 0/0
   281 ;;		Unchanged: 0/0
   282 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   283 ;;      Params:         0       0       0       0       0       0       0       0       0
   284 ;;      Locals:         0       4       0       0       0       0       0       0       0
   285 ;;      Temps:          3       0       0       0       0       0       0       0       0
   286 ;;      Totals:         3       4       0       0       0       0       0       0       0
   287 ;;Total ram usage:        7 bytes
   288 ;; Hardware stack levels required when called:    7
   289 ;; This function calls:
   290 ;;		_InitApp
   291 ;;		_line1
   292 ;;		_ltoa
   293 ;;		_strcat
   294 ;;		_strlen
   295 ;;		_writeLCD
   296 ;; This function is called by:
   297 ;;		Startup code after reset
   298 ;; This function uses a non-reentrant model
   299 ;;
   300                           
   301                           	psect	text0
   302  000814                     __ptext0:
   303                           	opt stack 0
   304  000814                     _main:
   305                           	opt stack 24
   306                           
   307                           ;main.c: 45: InitApp();
   308                           
   309                           ;incstack = 0
   310  000814  EC95  F006         	call	_InitApp	;wreg free
   311  000818                     l1239:
   312                           
   313                           ;main.c: 50: ADCON0bits.CHS = 0;
   314  000818  94C2               	bcf	4034,2,c	;volatile
   315  00081A  96C2               	bcf	4034,3,c	;volatile
   316  00081C  98C2               	bcf	4034,4,c	;volatile
   317  00081E  9AC2               	bcf	4034,5,c	;volatile
   318                           
   319                           ;main.c: 51: _delay(300);
   320  000820  0E64               	movlw	100
   321  000822                     u477:
   322  000822  2EE8               	decfsz	wreg,f,c
   323  000824  D7FE               	goto	u477
   324                           
   325                           ;main.c: 52: PIR1bits.ADIF=0;
   326  000826  9C9E               	bcf	3998,6,c	;volatile
   327                           
   328                           ;main.c: 53: ADCON0bits.GO=1;
   329  000828  82C2               	bsf	4034,1,c	;volatile
   330  00082A                     l40:
   331  00082A  B2C2               	btfsc	4034,1,c	;volatile
   332  00082C  D7FE               	goto	l40
   333                           
   334                           ;main.c: 55: totCur += ADRES;
   335  00082E  50C3               	movf	4035,w,c	;volatile
   336  000830  0100               	movlb	0	; () banked
   337  000832  2760               	addwf	_totCur& (0+255),f,b
   338  000834  50C4               	movf	4036,w,c	;volatile
   339  000836  0100               	movlb	0	; () banked
   340  000838  2361               	addwfc	(_totCur+1)& (0+255),f,b
   341  00083A  0E00               	movlw	0
   342  00083C  0100               	movlb	0	; () banked
   343  00083E  2362               	addwfc	(_totCur+2)& (0+255),f,b
   344  000840  0E00               	movlw	0
   345  000842  0100               	movlb	0	; () banked
   346  000844  2363               	addwfc	(_totCur+3)& (0+255),f,b
   347                           
   348                           ; BSR set to: 0
   349                           ;main.c: 56: ltoa(capacity, totCur, 10);
   350  000846  0E67               	movlw	low _capacity
   351  000848  0100               	movlb	0	; () banked
   352  00084A  6F8C               	movwf	ltoa@buf& (0+255),b
   353  00084C  0E00               	movlw	high _capacity
   354  00084E  0100               	movlb	0	; () banked
   355  000850  6F8D               	movwf	(ltoa@buf+1)& (0+255),b
   356  000852  C060  F08E         	movff	_totCur,ltoa@val
   357  000856  C061  F08F         	movff	_totCur+1,ltoa@val+1
   358  00085A  C062  F090         	movff	_totCur+2,ltoa@val+2
   359  00085E  C063  F091         	movff	_totCur+3,ltoa@val+3
   360  000862  0E00               	movlw	0
   361  000864  0100               	movlb	0	; () banked
   362  000866  6F93               	movwf	(ltoa@base+1)& (0+255),b
   363  000868  0E0A               	movlw	10
   364  00086A  6F92               	movwf	ltoa@base& (0+255),b
   365  00086C  ECE6  F005         	call	_ltoa	;wreg free
   366                           
   367                           ;main.c: 57: size_t lenCap = strlen(capacity);
   368  000870  0E67               	movlw	low _capacity
   369  000872  6E20               	movwf	strlen@s,c
   370  000874  0E00               	movlw	high _capacity
   371  000876  6E21               	movwf	strlen@s+1,c
   372  000878  EC5D  F006         	call	_strlen	;wreg free
   373  00087C  C020  F094         	movff	?_strlen,main@lenCap
   374  000880  C021  F095         	movff	?_strlen+1,main@lenCap+1
   375                           
   376                           ;main.c: 58: int width = 10 - lenCap;
   377  000884  C094  F03C         	movff	main@lenCap,??_main
   378  000888  C095  F03D         	movff	main@lenCap+1,??_main+1
   379  00088C  1E3C               	comf	??_main,f,c
   380  00088E  1E3D               	comf	??_main+1,f,c
   381  000890  4A3C               	infsnz	??_main,f,c
   382  000892  2A3D               	incf	??_main+1,f,c
   383  000894  0E0A               	movlw	10
   384  000896  243C               	addwf	??_main,w,c
   385  000898  0100               	movlb	0	; () banked
   386  00089A  6F96               	movwf	main@width& (0+255),b
   387  00089C  0E00               	movlw	0
   388  00089E  203D               	addwfc	??_main+1,w,c
   389  0008A0  0100               	movlb	0	; () banked
   390  0008A2  6F97               	movwf	(main@width+1)& (0+255),b
   391                           
   392                           ; BSR set to: 0
   393                           ;main.c: 59: iterLine1 = strLine1;
   394  0008A4  0E7B               	movlw	low _strLine1
   395  0008A6  0100               	movlb	0	; () banked
   396  0008A8  6F64               	movwf	_iterLine1& (0+255),b
   397  0008AA  0E00               	movlw	high _strLine1
   398  0008AC  0100               	movlb	0	; () banked
   399  0008AE  6F65               	movwf	(_iterLine1+1)& (0+255),b
   400                           
   401                           ; BSR set to: 0
   402                           ;main.c: 60: for(i=0; i < width; i++){
   403  0008B0  0E00               	movlw	0
   404  0008B2  0100               	movlb	0	; () banked
   405  0008B4  6F66               	movwf	_i& (0+255),b
   406  0008B6  D00B               	goto	l1265
   407  0008B8                     l1259:
   408                           
   409                           ; BSR set to: 0
   410                           ;main.c: 61: *iterLine1 = ' ';
   411  0008B8  C064  FFD9         	movff	_iterLine1,fsr2l
   412  0008BC  C065  FFDA         	movff	_iterLine1+1,fsr2h
   413  0008C0  0E20               	movlw	32
   414  0008C2  6EDF               	movwf	indf2,c
   415                           
   416                           ; BSR set to: 0
   417                           ;main.c: 62: iterLine1++;
   418  0008C4  0100               	movlb	0	; () banked
   419  0008C6  4B64               	infsnz	_iterLine1& (0+255),f,b
   420  0008C8  2B65               	incf	(_iterLine1+1)& (0+255),f,b
   421                           
   422                           ; BSR set to: 0
   423  0008CA  0100               	movlb	0	; () banked
   424  0008CC  2B66               	incf	_i& (0+255),f,b
   425  0008CE                     l1265:
   426                           
   427                           ; BSR set to: 0
   428  0008CE  0100               	movlb	0	; () banked
   429  0008D0  5166               	movf	_i& (0+255),w,b
   430  0008D2  6E3C               	movwf	??_main& (0+255),c
   431  0008D4  6A3D               	clrf	(??_main+1)& (0+255),c
   432  0008D6  0100               	movlb	0	; () banked
   433  0008D8  5196               	movf	main@width& (0+255),w,b
   434  0008DA  5C3C               	subwf	??_main,w,c
   435  0008DC  503D               	movf	??_main+1,w,c
   436  0008DE  0A80               	xorlw	128
   437  0008E0  6E3E               	movwf	(??_main+2)& (0+255),c
   438  0008E2  0100               	movlb	0	; () banked
   439  0008E4  5197               	movf	(main@width+1)& (0+255),w,b
   440  0008E6  0A80               	xorlw	128
   441  0008E8  583E               	subwfb	(??_main+2)& (0+255),w,c
   442  0008EA  A0D8               	btfss	status,0,c
   443  0008EC  D7E5               	goto	l1259
   444                           
   445                           ; BSR set to: 0
   446                           ;main.c: 63: }
   447                           ;main.c: 64: strcat(iterLine1, capacity);
   448                           
   449                           ; BSR set to: 0
   450  0008EE  C064  F020         	movff	_iterLine1,strcat@to
   451  0008F2  C065  F021         	movff	_iterLine1+1,strcat@to+1
   452  0008F6  0E67               	movlw	low _capacity
   453  0008F8  6E22               	movwf	strcat@from,c
   454  0008FA  0E00               	movlw	high _capacity
   455  0008FC  6E23               	movwf	strcat@from+1,c
   456  0008FE  ECBA  F005         	call	_strcat	;wreg free
   457                           
   458                           ;main.c: 65: strcat(iterLine1, "mA/h");
   459  000902  C064  F020         	movff	_iterLine1,strcat@to
   460  000906  C065  F021         	movff	_iterLine1+1,strcat@to+1
   461  00090A  0E0D               	movlw	low STR_1
   462  00090C  6E22               	movwf	strcat@from,c
   463  00090E  0E08               	movlw	high STR_1
   464  000910  6E23               	movwf	strcat@from+1,c
   465  000912  ECBA  F005         	call	_strcat	;wreg free
   466                           
   467                           ;main.c: 66: line1();
   468  000916  ECE1  F006         	call	_line1	;wreg free
   469                           
   470                           ;main.c: 67: writeLCD(strLine1);
   471  00091A  0E7B               	movlw	low _strLine1
   472  00091C  6E22               	movwf	writeLCD@str,c
   473  00091E  0E00               	movlw	high _strLine1
   474  000920  6E23               	movwf	writeLCD@str+1,c
   475  000922  EC12  F006         	call	_writeLCD	;wreg free
   476  000926  D778               	goto	l1239
   477  000928                     __end_of_main:
   478                           	opt stack 0
   479                           tblptru	equ	0xFF8
   480                           postinc0	equ	0xFEE
   481                           wreg	equ	0xFE8
   482                           indf2	equ	0xFDF
   483                           fsr2h	equ	0xFDA
   484                           fsr2l	equ	0xFD9
   485                           status	equ	0xFD8
   486                           
   487 ;; *************** function _strlen *****************
   488 ;; Defined at:
   489 ;;		line 4 in file "/opt/microchip/xc8/v1.35/sources/common/strlen.c"
   490 ;; Parameters:    Size  Location     Type
   491 ;;  s               2   31[COMRAM] PTR const unsigned char 
   492 ;;		 -> capacity(20), 
   493 ;; Auto vars:     Size  Location     Type
   494 ;;  cp              2   35[COMRAM] PTR const unsigned char 
   495 ;;		 -> capacity(20), 
   496 ;; Return value:  Size  Location     Type
   497 ;;                  2   31[COMRAM] unsigned int 
   498 ;; Registers used:
   499 ;;		wreg, fsr2l, fsr2h, status,2, status,0
   500 ;; Tracked objects:
   501 ;;		On entry : 0/0
   502 ;;		On exit  : 0/0
   503 ;;		Unchanged: 0/0
   504 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   505 ;;      Params:         2       0       0       0       0       0       0       0       0
   506 ;;      Locals:         2       0       0       0       0       0       0       0       0
   507 ;;      Temps:          2       0       0       0       0       0       0       0       0
   508 ;;      Totals:         6       0       0       0       0       0       0       0       0
   509 ;;Total ram usage:        6 bytes
   510 ;; Hardware stack levels used:    1
   511 ;; Hardware stack levels required when called:    2
   512 ;; This function calls:
   513 ;;		Nothing
   514 ;; This function is called by:
   515 ;;		_main
   516 ;; This function uses a non-reentrant model
   517 ;;
   518                           
   519                           	psect	text1
   520  000CBA                     __ptext1:
   521                           	opt stack 0
   522  000CBA                     _strlen:
   523                           	opt stack 28
   524                           
   525                           ;incstack = 0
   526  000CBA  C020  F024         	movff	strlen@s,strlen@cp
   527  000CBE  C021  F025         	movff	strlen@s+1,strlen@cp+1
   528  000CC2  D002               	goto	l1221
   529  000CC4                     l1219:
   530  000CC4  4A24               	infsnz	strlen@cp,f,c
   531  000CC6  2A25               	incf	strlen@cp+1,f,c
   532  000CC8                     l1221:
   533  000CC8  C024  FFD9         	movff	strlen@cp,fsr2l
   534  000CCC  C025  FFDA         	movff	strlen@cp+1,fsr2h
   535  000CD0  50DF               	movf	indf2,w,c
   536  000CD2  A4D8               	btfss	status,2,c
   537  000CD4  D7F7               	goto	l1219
   538  000CD6  C020  F022         	movff	strlen@s,??_strlen
   539  000CDA  C021  F023         	movff	strlen@s+1,??_strlen+1
   540  000CDE  1E22               	comf	??_strlen,f,c
   541  000CE0  1E23               	comf	??_strlen+1,f,c
   542  000CE2  4A22               	infsnz	??_strlen,f,c
   543  000CE4  2A23               	incf	??_strlen+1,f,c
   544  000CE6  5024               	movf	strlen@cp,w,c
   545  000CE8  2422               	addwf	??_strlen,w,c
   546  000CEA  6E20               	movwf	?_strlen,c
   547  000CEC  5025               	movf	strlen@cp+1,w,c
   548  000CEE  2023               	addwfc	??_strlen+1,w,c
   549  000CF0  6E21               	movwf	?_strlen+1,c
   550  000CF2  0012               	return	
   551  000CF4                     __end_of_strlen:
   552                           	opt stack 0
   553                           tblptru	equ	0xFF8
   554                           postinc0	equ	0xFEE
   555                           wreg	equ	0xFE8
   556                           indf2	equ	0xFDF
   557                           fsr2h	equ	0xFDA
   558                           fsr2l	equ	0xFD9
   559                           status	equ	0xFD8
   560                           
   561 ;; *************** function _strcat *****************
   562 ;; Defined at:
   563 ;;		line 8 in file "/opt/microchip/xc8/v1.35/sources/common/strcat.c"
   564 ;; Parameters:    Size  Location     Type
   565 ;;  to              2   31[COMRAM] PTR unsigned char 
   566 ;;		 -> NULL(0), strLine1(17), 
   567 ;;  from            2   33[COMRAM] PTR const unsigned char 
   568 ;;		 -> STR_1(5), capacity(20), 
   569 ;; Auto vars:     Size  Location     Type
   570 ;;  cp              2   35[COMRAM] PTR unsigned char 
   571 ;;		 -> NULL(0), strLine1(17), 
   572 ;; Return value:  Size  Location     Type
   573 ;;                  2   31[COMRAM] PTR unsigned char 
   574 ;; Registers used:
   575 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru
   576 ;; Tracked objects:
   577 ;;		On entry : 0/0
   578 ;;		On exit  : 0/0
   579 ;;		Unchanged: 0/0
   580 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   581 ;;      Params:         4       0       0       0       0       0       0       0       0
   582 ;;      Locals:         2       0       0       0       0       0       0       0       0
   583 ;;      Temps:          0       0       0       0       0       0       0       0       0
   584 ;;      Totals:         6       0       0       0       0       0       0       0       0
   585 ;;Total ram usage:        6 bytes
   586 ;; Hardware stack levels used:    1
   587 ;; Hardware stack levels required when called:    2
   588 ;; This function calls:
   589 ;;		Nothing
   590 ;; This function is called by:
   591 ;;		_main
   592 ;; This function uses a non-reentrant model
   593 ;;
   594                           
   595                           	psect	text2
   596  000B74                     __ptext2:
   597                           	opt stack 0
   598  000B74                     _strcat:
   599                           	opt stack 28
   600                           
   601                           ;incstack = 0
   602  000B74  C020  F024         	movff	strcat@to,strcat@cp
   603  000B78  C021  F025         	movff	strcat@to+1,strcat@cp+1
   604  000B7C  D002               	goto	l1231
   605  000B7E                     l1229:
   606  000B7E  4A24               	infsnz	strcat@cp,f,c
   607  000B80  2A25               	incf	strcat@cp+1,f,c
   608  000B82                     l1231:
   609  000B82  C024  FFD9         	movff	strcat@cp,fsr2l
   610  000B86  C025  FFDA         	movff	strcat@cp+1,fsr2h
   611  000B8A  50DF               	movf	indf2,w,c
   612  000B8C  B4D8               	btfsc	status,2,c
   613  000B8E  D005               	goto	l1235
   614  000B90  D7F6               	goto	l1229
   615  000B92                     l1233:
   616  000B92  4A24               	infsnz	strcat@cp,f,c
   617  000B94  2A25               	incf	strcat@cp+1,f,c
   618  000B96  4A22               	infsnz	strcat@from,f,c
   619  000B98  2A23               	incf	strcat@from+1,f,c
   620  000B9A                     l1235:
   621  000B9A  C022  FFF6         	movff	strcat@from,tblptrl
   622  000B9E  C023  FFF7         	movff	strcat@from+1,tblptrh
   623  000BA2  6AF8               	clrf	tblptru,c
   624  000BA4  C024  FFD9         	movff	strcat@cp,fsr2l
   625  000BA8  C025  FFDA         	movff	strcat@cp+1,fsr2h
   626  000BAC  0E07               	movlw	(high __ramtop+-1)
   627  000BAE  64F7               	cpfsgt	tblptrh,c
   628  000BB0  D003               	bra	u417
   629  000BB2  0008               	tblrd		*
   630  000BB4  50F5               	movf	tablat,w,c
   631  000BB6  D005               	bra	u410
   632  000BB8                     u417:
   633  000BB8  CFF6 FFE9          	movff	tblptrl,fsr0l
   634  000BBC  CFF7 FFEA          	movff	tblptrh,fsr0h
   635  000BC0  50EF               	movf	indf0,w,c
   636  000BC2                     u410:
   637  000BC2  6EDF               	movwf	indf2,c
   638  000BC4  50DF               	movf	indf2,w,c
   639  000BC6  B4D8               	btfsc	status,2,c
   640  000BC8  0012               	return	
   641  000BCA  D7E3               	goto	l1233
   642  000BCC                     __end_of_strcat:
   643                           	opt stack 0
   644                           tblptru	equ	0xFF8
   645                           tblptrh	equ	0xFF7
   646                           tblptrl	equ	0xFF6
   647                           tablat	equ	0xFF5
   648                           indf0	equ	0xFEF
   649                           postinc0	equ	0xFEE
   650                           fsr0h	equ	0xFEA
   651                           fsr0l	equ	0xFE9
   652                           wreg	equ	0xFE8
   653                           indf2	equ	0xFDF
   654                           fsr2h	equ	0xFDA
   655                           fsr2l	equ	0xFD9
   656                           status	equ	0xFD8
   657                           
   658 ;; *************** function _ltoa *****************
   659 ;; Defined at:
   660 ;;		line 7 in file "/opt/microchip/xc8/v1.35/sources/common/ltoa.c"
   661 ;; Parameters:    Size  Location     Type
   662 ;;  buf             2    0[BANK0 ] PTR unsigned char 
   663 ;;		 -> capacity(20), 
   664 ;;  val             4    2[BANK0 ] long 
   665 ;;  base            2    6[BANK0 ] int 
   666 ;; Auto vars:     Size  Location     Type
   667 ;;  cp              2   57[COMRAM] PTR unsigned char 
   668 ;;		 -> capacity(20), 
   669 ;; Return value:  Size  Location     Type
   670 ;;                  2    0[BANK0 ] PTR unsigned char 
   671 ;; Registers used:
   672 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
   673 ;; Tracked objects:
   674 ;;		On entry : 0/0
   675 ;;		On exit  : 0/0
   676 ;;		Unchanged: 0/0
   677 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   678 ;;      Params:         0       8       0       0       0       0       0       0       0
   679 ;;      Locals:         2       0       0       0       0       0       0       0       0
   680 ;;      Temps:          0       0       0       0       0       0       0       0       0
   681 ;;      Totals:         2       8       0       0       0       0       0       0       0
   682 ;;Total ram usage:       10 bytes
   683 ;; Hardware stack levels used:    1
   684 ;; Hardware stack levels required when called:    4
   685 ;; This function calls:
   686 ;;		_ultoa
   687 ;; This function is called by:
   688 ;;		_main
   689 ;; This function uses a non-reentrant model
   690 ;;
   691                           
   692                           	psect	text3
   693  000BCC                     __ptext3:
   694                           	opt stack 0
   695  000BCC                     _ltoa:
   696                           	opt stack 26
   697                           
   698                           ;incstack = 0
   699  000BCC  C08C  F03A         	movff	ltoa@buf,ltoa@cp
   700  000BD0  C08D  F03B         	movff	ltoa@buf+1,ltoa@cp+1
   701  000BD4  0100               	movlb	0	; () banked
   702  000BD6  AF91               	btfss	(ltoa@val+3)& (0+255),7,b
   703  000BD8  D012               	goto	l1213
   704                           
   705                           ; BSR set to: 0
   706  000BDA  C08C  FFD9         	movff	ltoa@buf,fsr2l
   707  000BDE  C08D  FFDA         	movff	ltoa@buf+1,fsr2h
   708  000BE2  0E2D               	movlw	45
   709  000BE4  6EDF               	movwf	indf2,c
   710                           
   711                           ; BSR set to: 0
   712  000BE6  0100               	movlb	0	; () banked
   713  000BE8  4B8C               	infsnz	ltoa@buf& (0+255),f,b
   714  000BEA  2B8D               	incf	(ltoa@buf+1)& (0+255),f,b
   715                           
   716                           ; BSR set to: 0
   717  000BEC  0100               	movlb	0	; () banked
   718  000BEE  1F91               	comf	(ltoa@val+3)& (0+255),f,b
   719  000BF0  1F90               	comf	(ltoa@val+2)& (0+255),f,b
   720  000BF2  1F8F               	comf	(ltoa@val+1)& (0+255),f,b
   721  000BF4  6D8E               	negf	ltoa@val& (0+255),b
   722  000BF6  0E00               	movlw	0
   723  000BF8  238F               	addwfc	(ltoa@val+1)& (0+255),f,b
   724  000BFA  2390               	addwfc	(ltoa@val+2)& (0+255),f,b
   725  000BFC  2391               	addwfc	(ltoa@val+3)& (0+255),f,b
   726  000BFE                     l1213:
   727                           
   728                           ; BSR set to: 0
   729  000BFE  C08C  F02D         	movff	ltoa@buf,ultoa@buf
   730  000C02  C08D  F02E         	movff	ltoa@buf+1,ultoa@buf+1
   731  000C06  C08E  F02F         	movff	ltoa@val,ultoa@val
   732  000C0A  C08F  F030         	movff	ltoa@val+1,ultoa@val+1
   733  000C0E  C090  F031         	movff	ltoa@val+2,ultoa@val+2
   734  000C12  C091  F032         	movff	ltoa@val+3,ultoa@val+3
   735  000C16  C092  F033         	movff	ltoa@base,ultoa@base
   736  000C1A  C093  F034         	movff	ltoa@base+1,ultoa@base+1
   737  000C1E  EC94  F004         	call	_ultoa	;wreg free
   738  000C22  0012               	return	
   739  000C24                     __end_of_ltoa:
   740                           	opt stack 0
   741                           tblptru	equ	0xFF8
   742                           tblptrh	equ	0xFF7
   743                           tblptrl	equ	0xFF6
   744                           tablat	equ	0xFF5
   745                           indf0	equ	0xFEF
   746                           postinc0	equ	0xFEE
   747                           fsr0h	equ	0xFEA
   748                           fsr0l	equ	0xFE9
   749                           wreg	equ	0xFE8
   750                           indf2	equ	0xFDF
   751                           fsr2h	equ	0xFDA
   752                           fsr2l	equ	0xFD9
   753                           status	equ	0xFD8
   754                           
   755 ;; *************** function _ultoa *****************
   756 ;; Defined at:
   757 ;;		line 32 in file "/opt/microchip/xc8/v1.35/sources/common/ltoa.c"
   758 ;; Parameters:    Size  Location     Type
   759 ;;  buf             2   44[COMRAM] PTR unsigned char 
   760 ;;		 -> capacity(20), 
   761 ;;  val             4   46[COMRAM] unsigned long 
   762 ;;  base            2   50[COMRAM] int 
   763 ;; Auto vars:     Size  Location     Type
   764 ;;  v               4   52[COMRAM] unsigned long 
   765 ;;  c               1   56[COMRAM] unsigned char 
   766 ;; Return value:  Size  Location     Type
   767 ;;                  2   44[COMRAM] PTR unsigned char 
   768 ;; Registers used:
   769 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
   770 ;; Tracked objects:
   771 ;;		On entry : 0/0
   772 ;;		On exit  : 0/0
   773 ;;		Unchanged: 0/0
   774 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   775 ;;      Params:         8       0       0       0       0       0       0       0       0
   776 ;;      Locals:         5       0       0       0       0       0       0       0       0
   777 ;;      Temps:          0       0       0       0       0       0       0       0       0
   778 ;;      Totals:        13       0       0       0       0       0       0       0       0
   779 ;;Total ram usage:       13 bytes
   780 ;; Hardware stack levels used:    1
   781 ;; Hardware stack levels required when called:    3
   782 ;; This function calls:
   783 ;;		___lldiv
   784 ;;		___llmod
   785 ;; This function is called by:
   786 ;;		_ltoa
   787 ;; This function uses a non-reentrant model
   788 ;;
   789                           
   790                           	psect	text4
   791  000928                     __ptext4:
   792                           	opt stack 0
   793  000928                     _ultoa:
   794                           	opt stack 26
   795                           
   796                           ;incstack = 0
   797  000928  C02F  F035         	movff	ultoa@val,ultoa@v
   798  00092C  C030  F036         	movff	ultoa@val+1,ultoa@v+1
   799  000930  C031  F037         	movff	ultoa@val+2,ultoa@v+2
   800  000934  C032  F038         	movff	ultoa@val+3,ultoa@v+3
   801  000938                     l1163:
   802  000938  C035  F020         	movff	ultoa@v,___lldiv@dividend
   803  00093C  C036  F021         	movff	ultoa@v+1,___lldiv@dividend+1
   804  000940  C037  F022         	movff	ultoa@v+2,___lldiv@dividend+2
   805  000944  C038  F023         	movff	ultoa@v+3,___lldiv@dividend+3
   806  000948  C033  F024         	movff	ultoa@base,___lldiv@divisor
   807  00094C  C034  F025         	movff	ultoa@base+1,___lldiv@divisor+1
   808  000950  0E00               	movlw	0
   809  000952  BE25               	btfsc	___lldiv@divisor+1,7,c
   810  000954  0EFF               	movlw	-1
   811  000956  6E26               	movwf	___lldiv@divisor+2,c
   812  000958  6E27               	movwf	___lldiv@divisor+3,c
   813  00095A  EC0F  F005         	call	___lldiv	;wreg free
   814  00095E  C020  F035         	movff	?___lldiv,ultoa@v
   815  000962  C021  F036         	movff	?___lldiv+1,ultoa@v+1
   816  000966  C022  F037         	movff	?___lldiv+2,ultoa@v+2
   817  00096A  C023  F038         	movff	?___lldiv+3,ultoa@v+3
   818  00096E  4A2D               	infsnz	ultoa@buf,f,c
   819  000970  2A2E               	incf	ultoa@buf+1,f,c
   820  000972  5035               	movf	ultoa@v,w,c
   821  000974  1036               	iorwf	ultoa@v+1,w,c
   822  000976  1037               	iorwf	ultoa@v+2,w,c
   823  000978  1038               	iorwf	ultoa@v+3,w,c
   824  00097A  A4D8               	btfss	status,2,c
   825  00097C  D7DD               	goto	l1163
   826  00097E  C02D  FFD9         	movff	ultoa@buf,fsr2l
   827  000982  C02E  FFDA         	movff	ultoa@buf+1,fsr2h
   828  000986  0E00               	movlw	0
   829  000988  6EDF               	movwf	indf2,c
   830  00098A  062D               	decf	ultoa@buf,f,c
   831  00098C  A0D8               	btfss	status,0,c
   832  00098E  062E               	decf	ultoa@buf+1,f,c
   833  000990                     l1173:
   834  000990  C02F  F020         	movff	ultoa@val,___llmod@dividend
   835  000994  C030  F021         	movff	ultoa@val+1,___llmod@dividend+1
   836  000998  C031  F022         	movff	ultoa@val+2,___llmod@dividend+2
   837  00099C  C032  F023         	movff	ultoa@val+3,___llmod@dividend+3
   838  0009A0  C033  F024         	movff	ultoa@base,___llmod@divisor
   839  0009A4  C034  F025         	movff	ultoa@base+1,___llmod@divisor+1
   840  0009A8  0E00               	movlw	0
   841  0009AA  BE25               	btfsc	___llmod@divisor+1,7,c
   842  0009AC  0EFF               	movlw	-1
   843  0009AE  6E26               	movwf	___llmod@divisor+2,c
   844  0009B0  6E27               	movwf	___llmod@divisor+3,c
   845  0009B2  EC87  F005         	call	___llmod	;wreg free
   846  0009B6  5020               	movf	?___llmod,w,c
   847  0009B8  6E39               	movwf	ultoa@c,c
   848  0009BA  C02F  F020         	movff	ultoa@val,___lldiv@dividend
   849  0009BE  C030  F021         	movff	ultoa@val+1,___lldiv@dividend+1
   850  0009C2  C031  F022         	movff	ultoa@val+2,___lldiv@dividend+2
   851  0009C6  C032  F023         	movff	ultoa@val+3,___lldiv@dividend+3
   852  0009CA  C033  F024         	movff	ultoa@base,___lldiv@divisor
   853  0009CE  C034  F025         	movff	ultoa@base+1,___lldiv@divisor+1
   854  0009D2  0E00               	movlw	0
   855  0009D4  BE25               	btfsc	___lldiv@divisor+1,7,c
   856  0009D6  0EFF               	movlw	-1
   857  0009D8  6E26               	movwf	___lldiv@divisor+2,c
   858  0009DA  6E27               	movwf	___lldiv@divisor+3,c
   859  0009DC  EC0F  F005         	call	___lldiv	;wreg free
   860  0009E0  C020  F02F         	movff	?___lldiv,ultoa@val
   861  0009E4  C021  F030         	movff	?___lldiv+1,ultoa@val+1
   862  0009E8  C022  F031         	movff	?___lldiv+2,ultoa@val+2
   863  0009EC  C023  F032         	movff	?___lldiv+3,ultoa@val+3
   864  0009F0  0E09               	movlw	9
   865  0009F2  6439               	cpfsgt	ultoa@c,c
   866  0009F4  D002               	goto	l533
   867  0009F6  0E07               	movlw	7
   868  0009F8  2639               	addwf	ultoa@c,f,c
   869  0009FA                     l533:
   870  0009FA  0E30               	movlw	48
   871  0009FC  2639               	addwf	ultoa@c,f,c
   872  0009FE  C02D  FFD9         	movff	ultoa@buf,fsr2l
   873  000A02  C02E  FFDA         	movff	ultoa@buf+1,fsr2h
   874  000A06  C039  FFDF         	movff	ultoa@c,indf2
   875  000A0A  062D               	decf	ultoa@buf,f,c
   876  000A0C  A0D8               	btfss	status,0,c
   877  000A0E  062E               	decf	ultoa@buf+1,f,c
   878  000A10  502F               	movf	ultoa@val,w,c
   879  000A12  1030               	iorwf	ultoa@val+1,w,c
   880  000A14  1031               	iorwf	ultoa@val+2,w,c
   881  000A16  1032               	iorwf	ultoa@val+3,w,c
   882  000A18  B4D8               	btfsc	status,2,c
   883  000A1A  0012               	return	
   884  000A1C  D7B9               	goto	l1173
   885  000A1E                     __end_of_ultoa:
   886                           	opt stack 0
   887                           tblptru	equ	0xFF8
   888                           tblptrh	equ	0xFF7
   889                           tblptrl	equ	0xFF6
   890                           tablat	equ	0xFF5
   891                           indf0	equ	0xFEF
   892                           postinc0	equ	0xFEE
   893                           fsr0h	equ	0xFEA
   894                           fsr0l	equ	0xFE9
   895                           wreg	equ	0xFE8
   896                           indf2	equ	0xFDF
   897                           fsr2h	equ	0xFDA
   898                           fsr2l	equ	0xFD9
   899                           status	equ	0xFD8
   900                           
   901 ;; *************** function ___llmod *****************
   902 ;; Defined at:
   903 ;;		line 8 in file "/opt/microchip/xc8/v1.35/sources/common/llmod.c"
   904 ;; Parameters:    Size  Location     Type
   905 ;;  dividend        4   31[COMRAM] unsigned long 
   906 ;;  divisor         4   35[COMRAM] unsigned long 
   907 ;; Auto vars:     Size  Location     Type
   908 ;;  counter         1   39[COMRAM] unsigned char 
   909 ;; Return value:  Size  Location     Type
   910 ;;                  4   31[COMRAM] unsigned long 
   911 ;; Registers used:
   912 ;;		wreg, status,2, status,0
   913 ;; Tracked objects:
   914 ;;		On entry : 0/0
   915 ;;		On exit  : 0/0
   916 ;;		Unchanged: 0/0
   917 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   918 ;;      Params:         8       0       0       0       0       0       0       0       0
   919 ;;      Locals:         1       0       0       0       0       0       0       0       0
   920 ;;      Temps:          0       0       0       0       0       0       0       0       0
   921 ;;      Totals:         9       0       0       0       0       0       0       0       0
   922 ;;Total ram usage:        9 bytes
   923 ;; Hardware stack levels used:    1
   924 ;; Hardware stack levels required when called:    2
   925 ;; This function calls:
   926 ;;		Nothing
   927 ;; This function is called by:
   928 ;;		_ultoa
   929 ;; This function uses a non-reentrant model
   930 ;;
   931                           
   932                           	psect	text5
   933  000B0E                     __ptext5:
   934                           	opt stack 0
   935  000B0E                     ___llmod:
   936                           	opt stack 26
   937                           
   938                           ;incstack = 0
   939  000B0E  5024               	movf	___llmod@divisor,w,c
   940  000B10  1025               	iorwf	___llmod@divisor+1,w,c
   941  000B12  1026               	iorwf	___llmod@divisor+2,w,c
   942  000B14  1027               	iorwf	___llmod@divisor+3,w,c
   943  000B16  B4D8               	btfsc	status,2,c
   944  000B18  D024               	goto	l486
   945  000B1A  0E01               	movlw	1
   946  000B1C  6E28               	movwf	___llmod@counter,c
   947  000B1E  D006               	goto	l1127
   948  000B20                     l1125:
   949  000B20  90D8               	bcf	status,0,c
   950  000B22  3624               	rlcf	___llmod@divisor,f,c
   951  000B24  3625               	rlcf	___llmod@divisor+1,f,c
   952  000B26  3626               	rlcf	___llmod@divisor+2,f,c
   953  000B28  3627               	rlcf	___llmod@divisor+3,f,c
   954  000B2A  2A28               	incf	___llmod@counter,f,c
   955  000B2C                     l1127:
   956  000B2C  AE27               	btfss	___llmod@divisor+3,7,c
   957  000B2E  D7F8               	goto	l1125
   958  000B30                     l1129:
   959  000B30  5024               	movf	___llmod@divisor,w,c
   960  000B32  5C20               	subwf	___llmod@dividend,w,c
   961  000B34  5025               	movf	___llmod@divisor+1,w,c
   962  000B36  5821               	subwfb	___llmod@dividend+1,w,c
   963  000B38  5026               	movf	___llmod@divisor+2,w,c
   964  000B3A  5822               	subwfb	___llmod@dividend+2,w,c
   965  000B3C  5027               	movf	___llmod@divisor+3,w,c
   966  000B3E  5823               	subwfb	___llmod@dividend+3,w,c
   967  000B40  A0D8               	btfss	status,0,c
   968  000B42  D008               	goto	l1133
   969  000B44  5024               	movf	___llmod@divisor,w,c
   970  000B46  5E20               	subwf	___llmod@dividend,f,c
   971  000B48  5025               	movf	___llmod@divisor+1,w,c
   972  000B4A  5A21               	subwfb	___llmod@dividend+1,f,c
   973  000B4C  5026               	movf	___llmod@divisor+2,w,c
   974  000B4E  5A22               	subwfb	___llmod@dividend+2,f,c
   975  000B50  5027               	movf	___llmod@divisor+3,w,c
   976  000B52  5A23               	subwfb	___llmod@dividend+3,f,c
   977  000B54                     l1133:
   978  000B54  90D8               	bcf	status,0,c
   979  000B56  3227               	rrcf	___llmod@divisor+3,f,c
   980  000B58  3226               	rrcf	___llmod@divisor+2,f,c
   981  000B5A  3225               	rrcf	___llmod@divisor+1,f,c
   982  000B5C  3224               	rrcf	___llmod@divisor,f,c
   983  000B5E  2E28               	decfsz	___llmod@counter,f,c
   984  000B60  D7E7               	goto	l1129
   985  000B62                     l486:
   986  000B62  C020  F020         	movff	___llmod@dividend,?___llmod
   987  000B66  C021  F021         	movff	___llmod@dividend+1,?___llmod+1
   988  000B6A  C022  F022         	movff	___llmod@dividend+2,?___llmod+2
   989  000B6E  C023  F023         	movff	___llmod@dividend+3,?___llmod+3
   990  000B72  0012               	return		;funcret
   991  000B74                     __end_of___llmod:
   992                           	opt stack 0
   993                           tblptru	equ	0xFF8
   994                           tblptrh	equ	0xFF7
   995                           tblptrl	equ	0xFF6
   996                           tablat	equ	0xFF5
   997                           indf0	equ	0xFEF
   998                           postinc0	equ	0xFEE
   999                           fsr0h	equ	0xFEA
  1000                           fsr0l	equ	0xFE9
  1001                           wreg	equ	0xFE8
  1002                           indf2	equ	0xFDF
  1003                           fsr2h	equ	0xFDA
  1004                           fsr2l	equ	0xFD9
  1005                           status	equ	0xFD8
  1006                           
  1007 ;; *************** function ___lldiv *****************
  1008 ;; Defined at:
  1009 ;;		line 8 in file "/opt/microchip/xc8/v1.35/sources/common/lldiv.c"
  1010 ;; Parameters:    Size  Location     Type
  1011 ;;  dividend        4   31[COMRAM] unsigned long 
  1012 ;;  divisor         4   35[COMRAM] unsigned long 
  1013 ;; Auto vars:     Size  Location     Type
  1014 ;;  quotient        4   39[COMRAM] unsigned long 
  1015 ;;  counter         1   43[COMRAM] unsigned char 
  1016 ;; Return value:  Size  Location     Type
  1017 ;;                  4   31[COMRAM] unsigned long 
  1018 ;; Registers used:
  1019 ;;		wreg, status,2, status,0
  1020 ;; Tracked objects:
  1021 ;;		On entry : 0/0
  1022 ;;		On exit  : 0/0
  1023 ;;		Unchanged: 0/0
  1024 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1025 ;;      Params:         8       0       0       0       0       0       0       0       0
  1026 ;;      Locals:         5       0       0       0       0       0       0       0       0
  1027 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1028 ;;      Totals:        13       0       0       0       0       0       0       0       0
  1029 ;;Total ram usage:       13 bytes
  1030 ;; Hardware stack levels used:    1
  1031 ;; Hardware stack levels required when called:    2
  1032 ;; This function calls:
  1033 ;;		Nothing
  1034 ;; This function is called by:
  1035 ;;		_ultoa
  1036 ;; This function uses a non-reentrant model
  1037 ;;
  1038                           
  1039                           	psect	text6
  1040  000A1E                     __ptext6:
  1041                           	opt stack 0
  1042  000A1E                     ___lldiv:
  1043                           	opt stack 26
  1044                           
  1045                           ;incstack = 0
  1046  000A1E  0E00               	movlw	0
  1047  000A20  6E28               	movwf	___lldiv@quotient,c
  1048  000A22  0E00               	movlw	0
  1049  000A24  6E29               	movwf	___lldiv@quotient+1,c
  1050  000A26  0E00               	movlw	0
  1051  000A28  6E2A               	movwf	___lldiv@quotient+2,c
  1052  000A2A  0E00               	movlw	0
  1053  000A2C  6E2B               	movwf	___lldiv@quotient+3,c
  1054  000A2E  5024               	movf	___lldiv@divisor,w,c
  1055  000A30  1025               	iorwf	___lldiv@divisor+1,w,c
  1056  000A32  1026               	iorwf	___lldiv@divisor+2,w,c
  1057  000A34  1027               	iorwf	___lldiv@divisor+3,w,c
  1058  000A36  B4D8               	btfsc	status,2,c
  1059  000A38  D02A               	goto	l476
  1060  000A3A  0E01               	movlw	1
  1061  000A3C  6E2C               	movwf	___lldiv@counter,c
  1062  000A3E  D006               	goto	l1107
  1063  000A40                     l1105:
  1064  000A40  90D8               	bcf	status,0,c
  1065  000A42  3624               	rlcf	___lldiv@divisor,f,c
  1066  000A44  3625               	rlcf	___lldiv@divisor+1,f,c
  1067  000A46  3626               	rlcf	___lldiv@divisor+2,f,c
  1068  000A48  3627               	rlcf	___lldiv@divisor+3,f,c
  1069  000A4A  2A2C               	incf	___lldiv@counter,f,c
  1070  000A4C                     l1107:
  1071  000A4C  AE27               	btfss	___lldiv@divisor+3,7,c
  1072  000A4E  D7F8               	goto	l1105
  1073  000A50                     l1109:
  1074  000A50  90D8               	bcf	status,0,c
  1075  000A52  3628               	rlcf	___lldiv@quotient,f,c
  1076  000A54  3629               	rlcf	___lldiv@quotient+1,f,c
  1077  000A56  362A               	rlcf	___lldiv@quotient+2,f,c
  1078  000A58  362B               	rlcf	___lldiv@quotient+3,f,c
  1079  000A5A  5024               	movf	___lldiv@divisor,w,c
  1080  000A5C  5C20               	subwf	___lldiv@dividend,w,c
  1081  000A5E  5025               	movf	___lldiv@divisor+1,w,c
  1082  000A60  5821               	subwfb	___lldiv@dividend+1,w,c
  1083  000A62  5026               	movf	___lldiv@divisor+2,w,c
  1084  000A64  5822               	subwfb	___lldiv@dividend+2,w,c
  1085  000A66  5027               	movf	___lldiv@divisor+3,w,c
  1086  000A68  5823               	subwfb	___lldiv@dividend+3,w,c
  1087  000A6A  A0D8               	btfss	status,0,c
  1088  000A6C  D009               	goto	l1117
  1089  000A6E  5024               	movf	___lldiv@divisor,w,c
  1090  000A70  5E20               	subwf	___lldiv@dividend,f,c
  1091  000A72  5025               	movf	___lldiv@divisor+1,w,c
  1092  000A74  5A21               	subwfb	___lldiv@dividend+1,f,c
  1093  000A76  5026               	movf	___lldiv@divisor+2,w,c
  1094  000A78  5A22               	subwfb	___lldiv@dividend+2,f,c
  1095  000A7A  5027               	movf	___lldiv@divisor+3,w,c
  1096  000A7C  5A23               	subwfb	___lldiv@dividend+3,f,c
  1097  000A7E  8028               	bsf	___lldiv@quotient,0,c
  1098  000A80                     l1117:
  1099  000A80  90D8               	bcf	status,0,c
  1100  000A82  3227               	rrcf	___lldiv@divisor+3,f,c
  1101  000A84  3226               	rrcf	___lldiv@divisor+2,f,c
  1102  000A86  3225               	rrcf	___lldiv@divisor+1,f,c
  1103  000A88  3224               	rrcf	___lldiv@divisor,f,c
  1104  000A8A  2E2C               	decfsz	___lldiv@counter,f,c
  1105  000A8C  D7E1               	goto	l1109
  1106  000A8E                     l476:
  1107  000A8E  C028  F020         	movff	___lldiv@quotient,?___lldiv
  1108  000A92  C029  F021         	movff	___lldiv@quotient+1,?___lldiv+1
  1109  000A96  C02A  F022         	movff	___lldiv@quotient+2,?___lldiv+2
  1110  000A9A  C02B  F023         	movff	___lldiv@quotient+3,?___lldiv+3
  1111  000A9E  0012               	return		;funcret
  1112  000AA0                     __end_of___lldiv:
  1113                           	opt stack 0
  1114                           tblptru	equ	0xFF8
  1115                           tblptrh	equ	0xFF7
  1116                           tblptrl	equ	0xFF6
  1117                           tablat	equ	0xFF5
  1118                           indf0	equ	0xFEF
  1119                           postinc0	equ	0xFEE
  1120                           fsr0h	equ	0xFEA
  1121                           fsr0l	equ	0xFE9
  1122                           wreg	equ	0xFE8
  1123                           indf2	equ	0xFDF
  1124                           fsr2h	equ	0xFDA
  1125                           fsr2l	equ	0xFD9
  1126                           status	equ	0xFD8
  1127                           
  1128 ;; *************** function _InitApp *****************
  1129 ;; Defined at:
  1130 ;;		line 17 in file "user.c"
  1131 ;; Parameters:    Size  Location     Type
  1132 ;;		None
  1133 ;; Auto vars:     Size  Location     Type
  1134 ;;		None
  1135 ;; Return value:  Size  Location     Type
  1136 ;;		None               void
  1137 ;; Registers used:
  1138 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  1139 ;; Tracked objects:
  1140 ;;		On entry : 0/0
  1141 ;;		On exit  : 0/0
  1142 ;;		Unchanged: 0/0
  1143 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1144 ;;      Params:         0       0       0       0       0       0       0       0       0
  1145 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1146 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1147 ;;      Totals:         0       0       0       0       0       0       0       0       0
  1148 ;;Total ram usage:        0 bytes
  1149 ;; Hardware stack levels used:    1
  1150 ;; Hardware stack levels required when called:    6
  1151 ;; This function calls:
  1152 ;;		_initLCD
  1153 ;; This function is called by:
  1154 ;;		_main
  1155 ;; This function uses a non-reentrant model
  1156 ;;
  1157                           
  1158                           	psect	text7
  1159  000D2A                     __ptext7:
  1160                           	opt stack 0
  1161  000D2A                     _InitApp:
  1162                           	opt stack 24
  1163                           
  1164                           ;user.c: 19: initLCD();
  1165                           
  1166                           ;incstack = 0
  1167  000D2A  EC7A  F006         	call	_initLCD	;wreg free
  1168                           
  1169                           ;user.c: 20: ADCON1bits.VCFG1=0;
  1170  000D2E  9AC1               	bcf	4033,5,c	;volatile
  1171                           
  1172                           ;user.c: 21: ADCON1bits.VCFG0=0;
  1173  000D30  98C1               	bcf	4033,4,c	;volatile
  1174                           
  1175                           ;user.c: 22: ADCON1bits.PCFG = 0xE;
  1176  000D32  50C1               	movf	4033,w,c	;volatile
  1177  000D34  0BF0               	andlw	-16
  1178  000D36  090E               	iorlw	14
  1179  000D38  6EC1               	movwf	4033,c	;volatile
  1180                           
  1181                           ;user.c: 24: ADCON0bits.CHS = 0;
  1182  000D3A  94C2               	bcf	4034,2,c	;volatile
  1183  000D3C  96C2               	bcf	4034,3,c	;volatile
  1184  000D3E  98C2               	bcf	4034,4,c	;volatile
  1185  000D40  9AC2               	bcf	4034,5,c	;volatile
  1186                           
  1187                           ;user.c: 26: ADCON2bits.ACQT = 0;
  1188  000D42  96C0               	bcf	4032,3,c	;volatile
  1189  000D44  98C0               	bcf	4032,4,c	;volatile
  1190  000D46  9AC0               	bcf	4032,5,c	;volatile
  1191                           
  1192                           ;user.c: 27: ADCON2bits.ADCS = 0x7;
  1193  000D48  80C0               	bsf	4032,0,c	;volatile
  1194  000D4A  82C0               	bsf	4032,1,c	;volatile
  1195  000D4C  84C0               	bsf	4032,2,c	;volatile
  1196                           
  1197                           ;user.c: 28: ADCON2bits.ADFM=1;
  1198  000D4E  8EC0               	bsf	4032,7,c	;volatile
  1199                           
  1200                           ;user.c: 30: ADCON0bits.ADON=1;
  1201  000D50  80C2               	bsf	4034,0,c	;volatile
  1202  000D52  0012               	return		;funcret
  1203  000D54                     __end_of_InitApp:
  1204                           	opt stack 0
  1205                           tblptru	equ	0xFF8
  1206                           tblptrh	equ	0xFF7
  1207                           tblptrl	equ	0xFF6
  1208                           tablat	equ	0xFF5
  1209                           indf0	equ	0xFEF
  1210                           postinc0	equ	0xFEE
  1211                           fsr0h	equ	0xFEA
  1212                           fsr0l	equ	0xFE9
  1213                           wreg	equ	0xFE8
  1214                           indf2	equ	0xFDF
  1215                           fsr2h	equ	0xFDA
  1216                           fsr2l	equ	0xFD9
  1217                           status	equ	0xFD8
  1218                           
  1219 ;; *************** function _initLCD *****************
  1220 ;; Defined at:
  1221 ;;		line 14 in file "LCD.c"
  1222 ;; Parameters:    Size  Location     Type
  1223 ;;		None
  1224 ;; Auto vars:     Size  Location     Type
  1225 ;;		None
  1226 ;; Return value:  Size  Location     Type
  1227 ;;		None               void
  1228 ;; Registers used:
  1229 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  1230 ;; Tracked objects:
  1231 ;;		On entry : 0/0
  1232 ;;		On exit  : 0/0
  1233 ;;		Unchanged: 0/0
  1234 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1235 ;;      Params:         0       0       0       0       0       0       0       0       0
  1236 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1237 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1238 ;;      Totals:         0       0       0       0       0       0       0       0       0
  1239 ;;Total ram usage:        0 bytes
  1240 ;; Hardware stack levels used:    1
  1241 ;; Hardware stack levels required when called:    5
  1242 ;; This function calls:
  1243 ;;		_line1
  1244 ;;		_line2
  1245 ;;		_waitForLCDStart
  1246 ;;		_writeLCD
  1247 ;; This function is called by:
  1248 ;;		_InitApp
  1249 ;; This function uses a non-reentrant model
  1250 ;;
  1251                           
  1252                           	psect	text8
  1253  000CF4                     __ptext8:
  1254                           	opt stack 0
  1255  000CF4                     _initLCD:
  1256                           	opt stack 24
  1257                           
  1258                           ;LCD.c: 16: TRISD=0;
  1259                           
  1260                           ;incstack = 0
  1261  000CF4  0E00               	movlw	0
  1262  000CF6  6E95               	movwf	3989,c	;volatile
  1263                           
  1264                           ;LCD.c: 17: TRISE0 = 0;
  1265  000CF8  9096               	bcf	3990,0,c	;volatile
  1266                           
  1267                           ;LCD.c: 18: TRISE1 = 0;
  1268  000CFA  9296               	bcf	3990,1,c	;volatile
  1269                           
  1270                           ;LCD.c: 19: TRISE2 = 0;
  1271  000CFC  9496               	bcf	3990,2,c	;volatile
  1272                           
  1273                           ;LCD.c: 20: LATEbits.LE0=0;
  1274  000CFE  908D               	bcf	3981,0,c	;volatile
  1275                           
  1276                           ;LCD.c: 21: LATEbits.LE1=0;
  1277  000D00  928D               	bcf	3981,1,c	;volatile
  1278                           
  1279                           ;LCD.c: 22: LATEbits.LE2=0;
  1280  000D02  948D               	bcf	3981,2,c	;volatile
  1281                           
  1282                           ;LCD.c: 23: waitForLCDStart();
  1283  000D04  EC3B  F006         	call	_waitForLCDStart	;wreg free
  1284                           
  1285                           ;LCD.c: 24: line1();
  1286  000D08  ECE1  F006         	call	_line1	;wreg free
  1287                           
  1288                           ;LCD.c: 25: writeLCD("line1");
  1289  000D0C  0E01               	movlw	low STR_2
  1290  000D0E  6E22               	movwf	writeLCD@str,c
  1291  000D10  0E08               	movlw	high STR_2
  1292  000D12  6E23               	movwf	writeLCD@str+1,c
  1293  000D14  EC12  F006         	call	_writeLCD	;wreg free
  1294                           
  1295                           ;LCD.c: 26: line2();
  1296  000D18  ECDD  F006         	call	_line2	;wreg free
  1297                           
  1298                           ;LCD.c: 27: writeLCD("line2");
  1299  000D1C  0E07               	movlw	low STR_3
  1300  000D1E  6E22               	movwf	writeLCD@str,c
  1301  000D20  0E08               	movlw	high STR_3
  1302  000D22  6E23               	movwf	writeLCD@str+1,c
  1303  000D24  EC12  F006         	call	_writeLCD	;wreg free
  1304  000D28  0012               	return		;funcret
  1305  000D2A                     __end_of_initLCD:
  1306                           	opt stack 0
  1307                           tblptru	equ	0xFF8
  1308                           tblptrh	equ	0xFF7
  1309                           tblptrl	equ	0xFF6
  1310                           tablat	equ	0xFF5
  1311                           indf0	equ	0xFEF
  1312                           postinc0	equ	0xFEE
  1313                           fsr0h	equ	0xFEA
  1314                           fsr0l	equ	0xFE9
  1315                           wreg	equ	0xFE8
  1316                           indf2	equ	0xFDF
  1317                           fsr2h	equ	0xFDA
  1318                           fsr2l	equ	0xFD9
  1319                           status	equ	0xFD8
  1320                           
  1321 ;; *************** function _writeLCD *****************
  1322 ;; Defined at:
  1323 ;;		line 38 in file "LCD.c"
  1324 ;; Parameters:    Size  Location     Type
  1325 ;;  str             2   33[COMRAM] PTR const unsigned char 
  1326 ;;		 -> STR_3(6), STR_2(6), strLine1(17), 
  1327 ;; Auto vars:     Size  Location     Type
  1328 ;;		None
  1329 ;; Return value:  Size  Location     Type
  1330 ;;		None               void
  1331 ;; Registers used:
  1332 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  1333 ;; Tracked objects:
  1334 ;;		On entry : 0/0
  1335 ;;		On exit  : 0/0
  1336 ;;		Unchanged: 0/0
  1337 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1338 ;;      Params:         2       0       0       0       0       0       0       0       0
  1339 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1340 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1341 ;;      Totals:         2       0       0       0       0       0       0       0       0
  1342 ;;Total ram usage:        2 bytes
  1343 ;; Hardware stack levels used:    1
  1344 ;; Hardware stack levels required when called:    4
  1345 ;; This function calls:
  1346 ;;		_writeDataLCD
  1347 ;; This function is called by:
  1348 ;;		_main
  1349 ;;		_initLCD
  1350 ;; This function uses a non-reentrant model
  1351 ;;
  1352                           
  1353                           	psect	text9
  1354  000C24                     __ptext9:
  1355                           	opt stack 0
  1356  000C24                     _writeLCD:
  1357                           	opt stack 26
  1358                           
  1359                           ;LCD.c: 39: while(*str != 0){
  1360                           
  1361                           ;incstack = 0
  1362  000C24  D014               	goto	l1083
  1363  000C26                     l1079:
  1364                           
  1365                           ;LCD.c: 40: writeDataLCD(*str);
  1366  000C26  C022  FFF6         	movff	writeLCD@str,tblptrl
  1367  000C2A  C023  FFF7         	movff	writeLCD@str+1,tblptrh
  1368  000C2E  6AF8               	clrf	tblptru,c
  1369  000C30  0E07               	movlw	(high __ramtop+-1)
  1370  000C32  64F7               	cpfsgt	tblptrh,c
  1371  000C34  D003               	bra	u267
  1372  000C36  0008               	tblrd		*
  1373  000C38  50F5               	movf	tablat,w,c
  1374  000C3A  D005               	bra	u260
  1375  000C3C                     u267:
  1376  000C3C  CFF6 FFE9          	movff	tblptrl,fsr0l
  1377  000C40  CFF7 FFEA          	movff	tblptrh,fsr0h
  1378  000C44  50EF               	movf	indf0,w,c
  1379  000C46                     u260:
  1380  000C46  ECC9  F006         	call	_writeDataLCD
  1381                           
  1382                           ;LCD.c: 41: str++;
  1383  000C4A  4A22               	infsnz	writeLCD@str,f,c
  1384  000C4C  2A23               	incf	writeLCD@str+1,f,c
  1385  000C4E                     l1083:
  1386  000C4E  C022  FFF6         	movff	writeLCD@str,tblptrl
  1387  000C52  C023  FFF7         	movff	writeLCD@str+1,tblptrh
  1388  000C56  6AF8               	clrf	tblptru,c
  1389  000C58  0E07               	movlw	(high __ramtop+-1)
  1390  000C5A  64F7               	cpfsgt	tblptrh,c
  1391  000C5C  D003               	bra	u277
  1392  000C5E  0008               	tblrd		*
  1393  000C60  50F5               	movf	tablat,w,c
  1394  000C62  D005               	bra	u270
  1395  000C64                     u277:
  1396  000C64  CFF6 FFE9          	movff	tblptrl,fsr0l
  1397  000C68  CFF7 FFEA          	movff	tblptrh,fsr0h
  1398  000C6C  50EF               	movf	indf0,w,c
  1399  000C6E                     u270:
  1400  000C6E  0900               	iorlw	0
  1401  000C70  B4D8               	btfsc	status,2,c
  1402  000C72  0012               	return	
  1403  000C74  D7D8               	goto	l1079
  1404  000C76                     __end_of_writeLCD:
  1405                           	opt stack 0
  1406                           tblptru	equ	0xFF8
  1407                           tblptrh	equ	0xFF7
  1408                           tblptrl	equ	0xFF6
  1409                           tablat	equ	0xFF5
  1410                           indf0	equ	0xFEF
  1411                           postinc0	equ	0xFEE
  1412                           fsr0h	equ	0xFEA
  1413                           fsr0l	equ	0xFE9
  1414                           wreg	equ	0xFE8
  1415                           indf2	equ	0xFDF
  1416                           fsr2h	equ	0xFDA
  1417                           fsr2l	equ	0xFD9
  1418                           status	equ	0xFD8
  1419                           
  1420 ;; *************** function _writeDataLCD *****************
  1421 ;; Defined at:
  1422 ;;		line 69 in file "LCD.c"
  1423 ;; Parameters:    Size  Location     Type
  1424 ;;  data            1    wreg     unsigned char 
  1425 ;; Auto vars:     Size  Location     Type
  1426 ;;  data            1   32[COMRAM] unsigned char 
  1427 ;; Return value:  Size  Location     Type
  1428 ;;		None               void
  1429 ;; Registers used:
  1430 ;;		wreg, status,2, cstack
  1431 ;; Tracked objects:
  1432 ;;		On entry : 0/0
  1433 ;;		On exit  : 0/0
  1434 ;;		Unchanged: 0/0
  1435 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1436 ;;      Params:         0       0       0       0       0       0       0       0       0
  1437 ;;      Locals:         1       0       0       0       0       0       0       0       0
  1438 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1439 ;;      Totals:         1       0       0       0       0       0       0       0       0
  1440 ;;Total ram usage:        1 bytes
  1441 ;; Hardware stack levels used:    1
  1442 ;; Hardware stack levels required when called:    3
  1443 ;; This function calls:
  1444 ;;		_waitNotBusy
  1445 ;; This function is called by:
  1446 ;;		_writeLCD
  1447 ;;		_writeLCDC
  1448 ;; This function uses a non-reentrant model
  1449 ;;
  1450                           
  1451                           	psect	text10
  1452  000D92                     __ptext10:
  1453                           	opt stack 0
  1454  000D92                     _writeDataLCD:
  1455                           	opt stack 26
  1456                           
  1457                           ;incstack = 0
  1458                           ;writeDataLCD@data stored from wreg
  1459  000D92  6E21               	movwf	writeDataLCD@data,c
  1460                           
  1461                           ;LCD.c: 70: waitNotBusy();
  1462  000D94  ECAA  F006         	call	_waitNotBusy	;wreg free
  1463                           
  1464                           ;LCD.c: 71: LATEbits.LE0=1;
  1465  000D98  808D               	bsf	3981,0,c	;volatile
  1466                           
  1467                           ;LCD.c: 72: LATEbits.LE1=0;
  1468  000D9A  928D               	bcf	3981,1,c	;volatile
  1469                           
  1470                           ;LCD.c: 73: LATEbits.LE2=1;
  1471  000D9C  848D               	bsf	3981,2,c	;volatile
  1472                           
  1473                           ;LCD.c: 74: PORTD=data;
  1474  000D9E  C021  FF83         	movff	writeDataLCD@data,3971	;volatile
  1475                           
  1476                           ;LCD.c: 75: LATEbits.LE2=0;
  1477  000DA2  948D               	bcf	3981,2,c	;volatile
  1478  000DA4  0012               	return		;funcret
  1479  000DA6                     __end_of_writeDataLCD:
  1480                           	opt stack 0
  1481                           tblptru	equ	0xFF8
  1482                           tblptrh	equ	0xFF7
  1483                           tblptrl	equ	0xFF6
  1484                           tablat	equ	0xFF5
  1485                           indf0	equ	0xFEF
  1486                           postinc0	equ	0xFEE
  1487                           fsr0h	equ	0xFEA
  1488                           fsr0l	equ	0xFE9
  1489                           wreg	equ	0xFE8
  1490                           indf2	equ	0xFDF
  1491                           fsr2h	equ	0xFDA
  1492                           fsr2l	equ	0xFD9
  1493                           status	equ	0xFD8
  1494                           
  1495 ;; *************** function _waitForLCDStart *****************
  1496 ;; Defined at:
  1497 ;;		line 58 in file "LCD.c"
  1498 ;; Parameters:    Size  Location     Type
  1499 ;;		None
  1500 ;; Auto vars:     Size  Location     Type
  1501 ;;		None
  1502 ;; Return value:  Size  Location     Type
  1503 ;;		None               void
  1504 ;; Registers used:
  1505 ;;		wreg, status,2, cstack
  1506 ;; Tracked objects:
  1507 ;;		On entry : 0/0
  1508 ;;		On exit  : 0/0
  1509 ;;		Unchanged: 0/0
  1510 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1511 ;;      Params:         0       0       0       0       0       0       0       0       0
  1512 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1513 ;;      Temps:          1       0       0       0       0       0       0       0       0
  1514 ;;      Totals:         1       0       0       0       0       0       0       0       0
  1515 ;;Total ram usage:        1 bytes
  1516 ;; Hardware stack levels used:    1
  1517 ;; Hardware stack levels required when called:    4
  1518 ;; This function calls:
  1519 ;;		_writeCmdLCD
  1520 ;; This function is called by:
  1521 ;;		_initLCD
  1522 ;; This function uses a non-reentrant model
  1523 ;;
  1524                           
  1525                           	psect	text11
  1526  000C76                     __ptext11:
  1527                           	opt stack 0
  1528  000C76                     _waitForLCDStart:
  1529                           	opt stack 24
  1530                           
  1531                           ;LCD.c: 59: _delay((unsigned long)((30)*(12000000/4000.0)));
  1532                           
  1533                           ;incstack = 0
  1534  000C76  0E75               	movlw	117
  1535  000C78  6E22               	movwf	??_waitForLCDStart& (0+255),c
  1536  000C7A  0EE1               	movlw	225
  1537  000C7C                     u487:
  1538  000C7C  2EE8               	decfsz	wreg,f,c
  1539  000C7E  D7FE               	goto	u487
  1540  000C80  2E22               	decfsz	??_waitForLCDStart& (0+255),f,c
  1541  000C82  D7FC               	goto	u487
  1542  000C84  F000               	nop	
  1543                           
  1544                           ;LCD.c: 60: writeCmdLCD(0x38);
  1545  000C86  0E38               	movlw	56
  1546  000C88  ECD3  F006         	call	_writeCmdLCD
  1547                           
  1548                           ;LCD.c: 61: _delay((unsigned long)((39)*(12000000/4000000.0)));
  1549  000C8C  0E27               	movlw	39
  1550  000C8E                     u497:
  1551  000C8E  2EE8               	decfsz	wreg,f,c
  1552  000C90  D7FE               	goto	u497
  1553                           
  1554                           ;LCD.c: 62: writeCmdLCD(0x0F);
  1555  000C92  0E0F               	movlw	15
  1556  000C94  ECD3  F006         	call	_writeCmdLCD
  1557                           
  1558                           ;LCD.c: 63: _delay((unsigned long)((39)*(12000000/4000000.0)));
  1559  000C98  0E27               	movlw	39
  1560  000C9A                     u507:
  1561  000C9A  2EE8               	decfsz	wreg,f,c
  1562  000C9C  D7FE               	goto	u507
  1563                           
  1564                           ;LCD.c: 64: writeCmdLCD(0x01);
  1565  000C9E  0E01               	movlw	1
  1566  000CA0  ECD3  F006         	call	_writeCmdLCD
  1567                           
  1568                           ;LCD.c: 65: _delay((unsigned long)((2)*(12000000/4000.0)));
  1569  000CA4  0E08               	movlw	8
  1570  000CA6  6E22               	movwf	??_waitForLCDStart& (0+255),c
  1571  000CA8  0ECA               	movlw	202
  1572  000CAA                     u517:
  1573  000CAA  2EE8               	decfsz	wreg,f,c
  1574  000CAC  D7FE               	goto	u517
  1575  000CAE  2E22               	decfsz	??_waitForLCDStart& (0+255),f,c
  1576  000CB0  D7FC               	goto	u517
  1577                           
  1578                           ;LCD.c: 66: writeCmdLCD(0x06);
  1579  000CB2  0E06               	movlw	6
  1580  000CB4  ECD3  F006         	call	_writeCmdLCD
  1581  000CB8  0012               	return		;funcret
  1582  000CBA                     __end_of_waitForLCDStart:
  1583                           	opt stack 0
  1584                           tblptru	equ	0xFF8
  1585                           tblptrh	equ	0xFF7
  1586                           tblptrl	equ	0xFF6
  1587                           tablat	equ	0xFF5
  1588                           indf0	equ	0xFEF
  1589                           postinc0	equ	0xFEE
  1590                           fsr0h	equ	0xFEA
  1591                           fsr0l	equ	0xFE9
  1592                           wreg	equ	0xFE8
  1593                           indf2	equ	0xFDF
  1594                           fsr2h	equ	0xFDA
  1595                           fsr2l	equ	0xFD9
  1596                           status	equ	0xFD8
  1597                           
  1598 ;; *************** function _line2 *****************
  1599 ;; Defined at:
  1600 ;;		line 34 in file "LCD.c"
  1601 ;; Parameters:    Size  Location     Type
  1602 ;;		None
  1603 ;; Auto vars:     Size  Location     Type
  1604 ;;		None
  1605 ;; Return value:  Size  Location     Type
  1606 ;;		None               void
  1607 ;; Registers used:
  1608 ;;		wreg, status,2, cstack
  1609 ;; Tracked objects:
  1610 ;;		On entry : 0/0
  1611 ;;		On exit  : 0/0
  1612 ;;		Unchanged: 0/0
  1613 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1614 ;;      Params:         0       0       0       0       0       0       0       0       0
  1615 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1616 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1617 ;;      Totals:         0       0       0       0       0       0       0       0       0
  1618 ;;Total ram usage:        0 bytes
  1619 ;; Hardware stack levels used:    1
  1620 ;; Hardware stack levels required when called:    4
  1621 ;; This function calls:
  1622 ;;		_writeCmdLCD
  1623 ;; This function is called by:
  1624 ;;		_initLCD
  1625 ;; This function uses a non-reentrant model
  1626 ;;
  1627                           
  1628                           	psect	text12
  1629  000DBA                     __ptext12:
  1630                           	opt stack 0
  1631  000DBA                     _line2:
  1632                           	opt stack 24
  1633                           
  1634                           ;LCD.c: 35: writeCmdLCD(0xC0);
  1635                           
  1636                           ;incstack = 0
  1637  000DBA  0EC0               	movlw	192
  1638  000DBC  ECD3  F006         	call	_writeCmdLCD
  1639  000DC0  0012               	return		;funcret
  1640  000DC2                     __end_of_line2:
  1641                           	opt stack 0
  1642                           tblptru	equ	0xFF8
  1643                           tblptrh	equ	0xFF7
  1644                           tblptrl	equ	0xFF6
  1645                           tablat	equ	0xFF5
  1646                           indf0	equ	0xFEF
  1647                           postinc0	equ	0xFEE
  1648                           fsr0h	equ	0xFEA
  1649                           fsr0l	equ	0xFE9
  1650                           wreg	equ	0xFE8
  1651                           indf2	equ	0xFDF
  1652                           fsr2h	equ	0xFDA
  1653                           fsr2l	equ	0xFD9
  1654                           status	equ	0xFD8
  1655                           
  1656 ;; *************** function _line1 *****************
  1657 ;; Defined at:
  1658 ;;		line 30 in file "LCD.c"
  1659 ;; Parameters:    Size  Location     Type
  1660 ;;		None
  1661 ;; Auto vars:     Size  Location     Type
  1662 ;;		None
  1663 ;; Return value:  Size  Location     Type
  1664 ;;		None               void
  1665 ;; Registers used:
  1666 ;;		wreg, status,2, cstack
  1667 ;; Tracked objects:
  1668 ;;		On entry : 0/0
  1669 ;;		On exit  : 0/0
  1670 ;;		Unchanged: 0/0
  1671 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1672 ;;      Params:         0       0       0       0       0       0       0       0       0
  1673 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1674 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1675 ;;      Totals:         0       0       0       0       0       0       0       0       0
  1676 ;;Total ram usage:        0 bytes
  1677 ;; Hardware stack levels used:    1
  1678 ;; Hardware stack levels required when called:    4
  1679 ;; This function calls:
  1680 ;;		_writeCmdLCD
  1681 ;; This function is called by:
  1682 ;;		_main
  1683 ;;		_initLCD
  1684 ;; This function uses a non-reentrant model
  1685 ;;
  1686                           
  1687                           	psect	text13
  1688  000DC2                     __ptext13:
  1689                           	opt stack 0
  1690  000DC2                     _line1:
  1691                           	opt stack 26
  1692                           
  1693                           ;LCD.c: 31: writeCmdLCD(0x80);
  1694                           
  1695                           ;incstack = 0
  1696  000DC2  0E80               	movlw	128
  1697  000DC4  ECD3  F006         	call	_writeCmdLCD
  1698  000DC8  0012               	return		;funcret
  1699  000DCA                     __end_of_line1:
  1700                           	opt stack 0
  1701                           tblptru	equ	0xFF8
  1702                           tblptrh	equ	0xFF7
  1703                           tblptrl	equ	0xFF6
  1704                           tablat	equ	0xFF5
  1705                           indf0	equ	0xFEF
  1706                           postinc0	equ	0xFEE
  1707                           fsr0h	equ	0xFEA
  1708                           fsr0l	equ	0xFE9
  1709                           wreg	equ	0xFE8
  1710                           indf2	equ	0xFDF
  1711                           fsr2h	equ	0xFDA
  1712                           fsr2l	equ	0xFD9
  1713                           status	equ	0xFD8
  1714                           
  1715 ;; *************** function _writeCmdLCD *****************
  1716 ;; Defined at:
  1717 ;;		line 79 in file "LCD.c"
  1718 ;; Parameters:    Size  Location     Type
  1719 ;;  data            1    wreg     unsigned char 
  1720 ;; Auto vars:     Size  Location     Type
  1721 ;;  data            1   32[COMRAM] unsigned char 
  1722 ;; Return value:  Size  Location     Type
  1723 ;;		None               void
  1724 ;; Registers used:
  1725 ;;		wreg, status,2, cstack
  1726 ;; Tracked objects:
  1727 ;;		On entry : 0/0
  1728 ;;		On exit  : 0/0
  1729 ;;		Unchanged: 0/0
  1730 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1731 ;;      Params:         0       0       0       0       0       0       0       0       0
  1732 ;;      Locals:         1       0       0       0       0       0       0       0       0
  1733 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1734 ;;      Totals:         1       0       0       0       0       0       0       0       0
  1735 ;;Total ram usage:        1 bytes
  1736 ;; Hardware stack levels used:    1
  1737 ;; Hardware stack levels required when called:    3
  1738 ;; This function calls:
  1739 ;;		_waitNotBusy
  1740 ;; This function is called by:
  1741 ;;		_line1
  1742 ;;		_line2
  1743 ;;		_waitForLCDStart
  1744 ;; This function uses a non-reentrant model
  1745 ;;
  1746                           
  1747                           	psect	text14
  1748  000DA6                     __ptext14:
  1749                           	opt stack 0
  1750  000DA6                     _writeCmdLCD:
  1751                           	opt stack 26
  1752                           
  1753                           ;incstack = 0
  1754                           ;writeCmdLCD@data stored from wreg
  1755  000DA6  6E21               	movwf	writeCmdLCD@data,c
  1756                           
  1757                           ;LCD.c: 80: waitNotBusy();
  1758  000DA8  ECAA  F006         	call	_waitNotBusy	;wreg free
  1759                           
  1760                           ;LCD.c: 81: LATEbits.LE0=0;
  1761  000DAC  908D               	bcf	3981,0,c	;volatile
  1762                           
  1763                           ;LCD.c: 82: LATEbits.LE1=0;
  1764  000DAE  928D               	bcf	3981,1,c	;volatile
  1765                           
  1766                           ;LCD.c: 83: LATEbits.LE2=1;
  1767  000DB0  848D               	bsf	3981,2,c	;volatile
  1768                           
  1769                           ;LCD.c: 84: PORTD=data;
  1770  000DB2  C021  FF83         	movff	writeCmdLCD@data,3971	;volatile
  1771                           
  1772                           ;LCD.c: 85: LATEbits.LE2=0;
  1773  000DB6  948D               	bcf	3981,2,c	;volatile
  1774  000DB8  0012               	return		;funcret
  1775  000DBA                     __end_of_writeCmdLCD:
  1776                           	opt stack 0
  1777                           tblptru	equ	0xFF8
  1778                           tblptrh	equ	0xFF7
  1779                           tblptrl	equ	0xFF6
  1780                           tablat	equ	0xFF5
  1781                           indf0	equ	0xFEF
  1782                           postinc0	equ	0xFEE
  1783                           fsr0h	equ	0xFEA
  1784                           fsr0l	equ	0xFE9
  1785                           wreg	equ	0xFE8
  1786                           indf2	equ	0xFDF
  1787                           fsr2h	equ	0xFDA
  1788                           fsr2l	equ	0xFD9
  1789                           status	equ	0xFD8
  1790                           
  1791 ;; *************** function _waitNotBusy *****************
  1792 ;; Defined at:
  1793 ;;		line 88 in file "LCD.c"
  1794 ;; Parameters:    Size  Location     Type
  1795 ;;		None
  1796 ;; Auto vars:     Size  Location     Type
  1797 ;;  res             1   31[COMRAM] unsigned char 
  1798 ;; Return value:  Size  Location     Type
  1799 ;;		None               void
  1800 ;; Registers used:
  1801 ;;		wreg, status,2
  1802 ;; Tracked objects:
  1803 ;;		On entry : 0/0
  1804 ;;		On exit  : 0/0
  1805 ;;		Unchanged: 0/0
  1806 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1807 ;;      Params:         0       0       0       0       0       0       0       0       0
  1808 ;;      Locals:         1       0       0       0       0       0       0       0       0
  1809 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1810 ;;      Totals:         1       0       0       0       0       0       0       0       0
  1811 ;;Total ram usage:        1 bytes
  1812 ;; Hardware stack levels used:    1
  1813 ;; Hardware stack levels required when called:    2
  1814 ;; This function calls:
  1815 ;;		Nothing
  1816 ;; This function is called by:
  1817 ;;		_writeDataLCD
  1818 ;;		_writeCmdLCD
  1819 ;; This function uses a non-reentrant model
  1820 ;;
  1821                           
  1822                           	psect	text15
  1823  000D54                     __ptext15:
  1824                           	opt stack 0
  1825  000D54                     _waitNotBusy:
  1826                           	opt stack 26
  1827                           
  1828                           ;LCD.c: 89: TRISD=0xFF;
  1829                           
  1830                           ;incstack = 0
  1831  000D54  6895               	setf	3989,c	;volatile
  1832                           
  1833                           ;LCD.c: 90: uint8_t res=0;
  1834  000D56  0E00               	movlw	0
  1835  000D58  6E20               	movwf	waitNotBusy@res,c
  1836                           
  1837                           ;LCD.c: 91: LATEbits.LE0=0;
  1838  000D5A  908D               	bcf	3981,0,c	;volatile
  1839                           
  1840                           ;LCD.c: 92: LATEbits.LE1=1;
  1841  000D5C  828D               	bsf	3981,1,c	;volatile
  1842  000D5E                     l1037:
  1843                           
  1844                           ;LCD.c: 94: LATEbits.LE2=1;
  1845  000D5E  848D               	bsf	3981,2,c	;volatile
  1846                           
  1847                           ;LCD.c: 95: _delay(2);
  1848  000D60  D000               	nop2		;2 cycle nop
  1849                           
  1850                           ;LCD.c: 96: if (PORTDbits.RD7 == 0){
  1851  000D62  BE83               	btfsc	3971,7,c	;volatile
  1852  000D64  D002               	goto	l1045
  1853                           
  1854                           ;LCD.c: 97: res=1;
  1855  000D66  0E01               	movlw	1
  1856  000D68  6E20               	movwf	waitNotBusy@res,c
  1857  000D6A                     l1045:
  1858                           
  1859                           ;LCD.c: 98: }
  1860                           ;LCD.c: 99: LATEbits.LE2=0;
  1861  000D6A  948D               	bcf	3981,2,c	;volatile
  1862                           
  1863                           ;LCD.c: 100: } while (res == 0);
  1864  000D6C  5020               	movf	waitNotBusy@res,w,c
  1865  000D6E  B4D8               	btfsc	status,2,c
  1866  000D70  D7F6               	goto	l1037
  1867                           
  1868                           ;LCD.c: 101: TRISD=0;
  1869  000D72  0E00               	movlw	0
  1870  000D74  6E95               	movwf	3989,c	;volatile
  1871  000D76  0012               	return	
  1872  000D78                     __end_of_waitNotBusy:
  1873                           	opt stack 0
  1874                           tblptru	equ	0xFF8
  1875                           tblptrh	equ	0xFF7
  1876                           tblptrl	equ	0xFF6
  1877                           tablat	equ	0xFF5
  1878                           indf0	equ	0xFEF
  1879                           postinc0	equ	0xFEE
  1880                           fsr0h	equ	0xFEA
  1881                           fsr0l	equ	0xFE9
  1882                           wreg	equ	0xFE8
  1883                           indf2	equ	0xFDF
  1884                           fsr2h	equ	0xFDA
  1885                           fsr2l	equ	0xFD9
  1886                           status	equ	0xFD8
  1887                           
  1888 ;; *************** function _low_isr *****************
  1889 ;; Defined at:
  1890 ;;		line 52 in file "interrupts.c"
  1891 ;; Parameters:    Size  Location     Type
  1892 ;;		None
  1893 ;; Auto vars:     Size  Location     Type
  1894 ;;		None
  1895 ;; Return value:  Size  Location     Type
  1896 ;;		None               void
  1897 ;; Registers used:
  1898 ;;		None
  1899 ;; Tracked objects:
  1900 ;;		On entry : 0/0
  1901 ;;		On exit  : 0/0
  1902 ;;		Unchanged: 0/0
  1903 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1904 ;;      Params:         0       0       0       0       0       0       0       0       0
  1905 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1906 ;;      Temps:         17       0       0       0       0       0       0       0       0
  1907 ;;      Totals:        17       0       0       0       0       0       0       0       0
  1908 ;;Total ram usage:       17 bytes
  1909 ;; Hardware stack levels used:    1
  1910 ;; Hardware stack levels required when called:    1
  1911 ;; This function calls:
  1912 ;;		Nothing
  1913 ;; This function is called by:
  1914 ;;		Interrupt level 1
  1915 ;; This function uses a non-reentrant model
  1916 ;;
  1917                           
  1918                           	psect	intcodelo
  1919  000018                     __pintcodelo:
  1920                           	opt stack 0
  1921  000018                     _low_isr:
  1922                           	opt stack 24
  1923                           
  1924                           ;incstack = 0
  1925  000018  803F               	bsf	btemp,0,c	;set compiler interrupt flag (level 1)
  1926  00001A  CFD8 F001          	movff	status,??_low_isr
  1927  00001E  CFE8 F002          	movff	wreg,??_low_isr+1
  1928  000022  CFE0 F003          	movff	bsr,??_low_isr+2
  1929  000026  CFFA F004          	movff	pclath,??_low_isr+3
  1930  00002A  CFFB F005          	movff	pclatu,??_low_isr+4
  1931  00002E  CFE9 F006          	movff	fsr0l,??_low_isr+5
  1932  000032  CFEA F007          	movff	fsr0h,??_low_isr+6
  1933  000036  CFE1 F008          	movff	fsr1l,??_low_isr+7
  1934  00003A  CFE2 F009          	movff	fsr1h,??_low_isr+8
  1935  00003E  CFD9 F00A          	movff	fsr2l,??_low_isr+9
  1936  000042  CFDA F00B          	movff	fsr2h,??_low_isr+10
  1937  000046  CFF3 F00C          	movff	prodl,??_low_isr+11
  1938  00004A  CFF4 F00D          	movff	prodh,??_low_isr+12
  1939  00004E  CFF6 F00E          	movff	tblptrl,??_low_isr+13
  1940  000052  CFF7 F00F          	movff	tblptrh,??_low_isr+14
  1941  000056  CFF8 F010          	movff	tblptru,??_low_isr+15
  1942  00005A  CFF5 F011          	movff	tablat,??_low_isr+16
  1943  00005E  C011  FFF5         	movff	??_low_isr+16,tablat
  1944  000062  C010  FFF8         	movff	??_low_isr+15,tblptru
  1945  000066  C00F  FFF7         	movff	??_low_isr+14,tblptrh
  1946  00006A  C00E  FFF6         	movff	??_low_isr+13,tblptrl
  1947  00006E  C00D  FFF4         	movff	??_low_isr+12,prodh
  1948  000072  C00C  FFF3         	movff	??_low_isr+11,prodl
  1949  000076  C00B  FFDA         	movff	??_low_isr+10,fsr2h
  1950  00007A  C00A  FFD9         	movff	??_low_isr+9,fsr2l
  1951  00007E  C009  FFE2         	movff	??_low_isr+8,fsr1h
  1952  000082  C008  FFE1         	movff	??_low_isr+7,fsr1l
  1953  000086  C007  FFEA         	movff	??_low_isr+6,fsr0h
  1954  00008A  C006  FFE9         	movff	??_low_isr+5,fsr0l
  1955  00008E  C005  FFFB         	movff	??_low_isr+4,pclatu
  1956  000092  C004  FFFA         	movff	??_low_isr+3,pclath
  1957  000096  C003  FFE0         	movff	??_low_isr+2,bsr
  1958  00009A  C002  FFE8         	movff	??_low_isr+1,wreg
  1959  00009E  C001  FFD8         	movff	??_low_isr,status
  1960  0000A2  903F               	bcf	btemp,0,c	;clear compiler interrupt flag (level 1)
  1961  0000A4  0010               	retfie	
  1962  0000A6                     __end_of_low_isr:
  1963                           	opt stack 0
  1964                           pclatu	equ	0xFFB
  1965                           pclath	equ	0xFFA
  1966                           tblptru	equ	0xFF8
  1967                           tblptrh	equ	0xFF7
  1968                           tblptrl	equ	0xFF6
  1969                           tablat	equ	0xFF5
  1970                           prodh	equ	0xFF4
  1971                           prodl	equ	0xFF3
  1972                           indf0	equ	0xFEF
  1973                           postinc0	equ	0xFEE
  1974                           fsr0h	equ	0xFEA
  1975                           fsr0l	equ	0xFE9
  1976                           wreg	equ	0xFE8
  1977                           fsr1h	equ	0xFE2
  1978                           fsr1l	equ	0xFE1
  1979                           bsr	equ	0xFE0
  1980                           indf2	equ	0xFDF
  1981                           fsr2h	equ	0xFDA
  1982                           fsr2l	equ	0xFD9
  1983                           status	equ	0xFD8
  1984                           
  1985 ;; *************** function _high_isr *****************
  1986 ;; Defined at:
  1987 ;;		line 18 in file "interrupts.c"
  1988 ;; Parameters:    Size  Location     Type
  1989 ;;		None
  1990 ;; Auto vars:     Size  Location     Type
  1991 ;;		None
  1992 ;; Return value:  Size  Location     Type
  1993 ;;		None               void
  1994 ;; Registers used:
  1995 ;;		None
  1996 ;; Tracked objects:
  1997 ;;		On entry : 0/0
  1998 ;;		On exit  : 0/0
  1999 ;;		Unchanged: 0/0
  2000 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2001 ;;      Params:         0       0       0       0       0       0       0       0       0
  2002 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2003 ;;      Temps:         14       0       0       0       0       0       0       0       0
  2004 ;;      Totals:        14       0       0       0       0       0       0       0       0
  2005 ;;Total ram usage:       14 bytes
  2006 ;; Hardware stack levels used:    1
  2007 ;; This function calls:
  2008 ;;		Nothing
  2009 ;; This function is called by:
  2010 ;;		Interrupt level 2
  2011 ;; This function uses a non-reentrant model
  2012 ;;
  2013                           
  2014                           	psect	intcode
  2015  000008                     __pintcode:
  2016                           	opt stack 0
  2017  000008                     _high_isr:
  2018                           	opt stack 24
  2019                           
  2020                           ;incstack = 0
  2021  000008  823F               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  2022  00000A  CFFA F012          	movff	pclath,??_high_isr
  2023  00000E  CFFB F013          	movff	pclatu,??_high_isr+1
  2024  000012  ED50  F005         	call	int_func,f	;refresh shadow registers
  2025                           pclatu	equ	0xFFB
  2026                           pclath	equ	0xFFA
  2027                           tblptru	equ	0xFF8
  2028                           tblptrh	equ	0xFF7
  2029                           tblptrl	equ	0xFF6
  2030                           tablat	equ	0xFF5
  2031                           prodh	equ	0xFF4
  2032                           prodl	equ	0xFF3
  2033                           indf0	equ	0xFEF
  2034                           postinc0	equ	0xFEE
  2035                           fsr0h	equ	0xFEA
  2036                           fsr0l	equ	0xFE9
  2037                           wreg	equ	0xFE8
  2038                           fsr1h	equ	0xFE2
  2039                           fsr1l	equ	0xFE1
  2040                           bsr	equ	0xFE0
  2041                           indf2	equ	0xFDF
  2042                           fsr2h	equ	0xFDA
  2043                           fsr2l	equ	0xFD9
  2044                           status	equ	0xFD8
  2045                           
  2046                           	psect	intcode_body
  2047  000AA0                     __pintcode_body:
  2048                           	opt stack 24
  2049  000AA0                     int_func:
  2050                           	opt stack 24
  2051  000AA0  0006               	pop		; remove dummy address from shadow register refresh
  2052  000AA2  CFE9 F014          	movff	fsr0l,??_high_isr+2
  2053  000AA6  CFEA F015          	movff	fsr0h,??_high_isr+3
  2054  000AAA  CFE1 F016          	movff	fsr1l,??_high_isr+4
  2055  000AAE  CFE2 F017          	movff	fsr1h,??_high_isr+5
  2056  000AB2  CFD9 F018          	movff	fsr2l,??_high_isr+6
  2057  000AB6  CFDA F019          	movff	fsr2h,??_high_isr+7
  2058  000ABA  CFF3 F01A          	movff	prodl,??_high_isr+8
  2059  000ABE  CFF4 F01B          	movff	prodh,??_high_isr+9
  2060  000AC2  CFF6 F01C          	movff	tblptrl,??_high_isr+10
  2061  000AC6  CFF7 F01D          	movff	tblptrh,??_high_isr+11
  2062  000ACA  CFF8 F01E          	movff	tblptru,??_high_isr+12
  2063  000ACE  CFF5 F01F          	movff	tablat,??_high_isr+13
  2064  000AD2  C01F  FFF5         	movff	??_high_isr+13,tablat
  2065  000AD6  C01E  FFF8         	movff	??_high_isr+12,tblptru
  2066  000ADA  C01D  FFF7         	movff	??_high_isr+11,tblptrh
  2067  000ADE  C01C  FFF6         	movff	??_high_isr+10,tblptrl
  2068  000AE2  C01B  FFF4         	movff	??_high_isr+9,prodh
  2069  000AE6  C01A  FFF3         	movff	??_high_isr+8,prodl
  2070  000AEA  C019  FFDA         	movff	??_high_isr+7,fsr2h
  2071  000AEE  C018  FFD9         	movff	??_high_isr+6,fsr2l
  2072  000AF2  C017  FFE2         	movff	??_high_isr+5,fsr1h
  2073  000AF6  C016  FFE1         	movff	??_high_isr+4,fsr1l
  2074  000AFA  C015  FFEA         	movff	??_high_isr+3,fsr0h
  2075  000AFE  C014  FFE9         	movff	??_high_isr+2,fsr0l
  2076  000B02  C013  FFFB         	movff	??_high_isr+1,pclatu
  2077  000B06  C012  FFFA         	movff	??_high_isr,pclath
  2078  000B0A  923F               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  2079  000B0C  0011               	retfie		f
  2080  000B0E                     __end_of_high_isr:
  2081                           	opt stack 0
  2082                           pclatu	equ	0xFFB
  2083                           pclath	equ	0xFFA
  2084                           tblptru	equ	0xFF8
  2085                           tblptrh	equ	0xFF7
  2086                           tblptrl	equ	0xFF6
  2087                           tablat	equ	0xFF5
  2088                           prodh	equ	0xFF4
  2089                           prodl	equ	0xFF3
  2090                           indf0	equ	0xFEF
  2091                           postinc0	equ	0xFEE
  2092                           fsr0h	equ	0xFEA
  2093                           fsr0l	equ	0xFE9
  2094                           wreg	equ	0xFE8
  2095                           fsr1h	equ	0xFE2
  2096                           fsr1l	equ	0xFE1
  2097                           bsr	equ	0xFE0
  2098                           indf2	equ	0xFDF
  2099                           fsr2h	equ	0xFDA
  2100                           fsr2l	equ	0xFD9
  2101                           status	equ	0xFD8
  2102                           pclatu	equ	0xFFB
  2103                           pclath	equ	0xFFA
  2104                           tblptru	equ	0xFF8
  2105                           tblptrh	equ	0xFF7
  2106                           tblptrl	equ	0xFF6
  2107                           tablat	equ	0xFF5
  2108                           prodh	equ	0xFF4
  2109                           prodl	equ	0xFF3
  2110                           indf0	equ	0xFEF
  2111                           postinc0	equ	0xFEE
  2112                           fsr0h	equ	0xFEA
  2113                           fsr0l	equ	0xFE9
  2114                           wreg	equ	0xFE8
  2115                           fsr1h	equ	0xFE2
  2116                           fsr1l	equ	0xFE1
  2117                           bsr	equ	0xFE0
  2118                           indf2	equ	0xFDF
  2119                           fsr2h	equ	0xFDA
  2120                           fsr2l	equ	0xFD9
  2121                           status	equ	0xFD8
  2122                           
  2123                           	psect	rparam
  2124  0000                     pclatu	equ	0xFFB
  2125                           pclath	equ	0xFFA
  2126                           tblptru	equ	0xFF8
  2127                           tblptrh	equ	0xFF7
  2128                           tblptrl	equ	0xFF6
  2129                           tablat	equ	0xFF5
  2130                           prodh	equ	0xFF4
  2131                           prodl	equ	0xFF3
  2132                           indf0	equ	0xFEF
  2133                           postinc0	equ	0xFEE
  2134                           fsr0h	equ	0xFEA
  2135                           fsr0l	equ	0xFE9
  2136                           wreg	equ	0xFE8
  2137                           fsr1h	equ	0xFE2
  2138                           fsr1l	equ	0xFE1
  2139                           bsr	equ	0xFE0
  2140                           indf2	equ	0xFDF
  2141                           fsr2h	equ	0xFDA
  2142                           fsr2l	equ	0xFD9
  2143                           status	equ	0xFD8
  2144                           
  2145                           	psect	temp
  2146  00003F                     btemp:
  2147                           	opt stack 0
  2148  00003F                     	ds	1
  2149  0000                     int$flags	set	btemp
  2150                           pclatu	equ	0xFFB
  2151                           pclath	equ	0xFFA
  2152                           tblptru	equ	0xFF8
  2153                           tblptrh	equ	0xFF7
  2154                           tblptrl	equ	0xFF6
  2155                           tablat	equ	0xFF5
  2156                           prodh	equ	0xFF4
  2157                           prodl	equ	0xFF3
  2158                           indf0	equ	0xFEF
  2159                           postinc0	equ	0xFEE
  2160                           fsr0h	equ	0xFEA
  2161                           fsr0l	equ	0xFE9
  2162                           wreg	equ	0xFE8
  2163                           fsr1h	equ	0xFE2
  2164                           fsr1l	equ	0xFE1
  2165                           bsr	equ	0xFE0
  2166                           indf2	equ	0xFDF
  2167                           fsr2h	equ	0xFDA
  2168                           fsr2l	equ	0xFD9
  2169                           status	equ	0xFD8


Data Sizes:
    Strings     17
    Constant    0
    Data        0
    BSS         44
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     62      62
    BANK0           160     12      56
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0

Pointer List with Targets:

    strlen@s	PTR const unsigned char  size(2) Largest target is 20
		 -> capacity(BANK0[20]), 

    strlen@cp	PTR const unsigned char  size(2) Largest target is 20
		 -> capacity(BANK0[20]), 

    strcat@from	PTR const unsigned char  size(2) Largest target is 20
		 -> STR_1(CODE[5]), capacity(BANK0[20]), 

    strcat@to	PTR unsigned char  size(2) Largest target is 17
		 -> NULL(NULL[0]), strLine1(BANK0[17]), 

    strcat@cp	PTR unsigned char  size(2) Largest target is 17
		 -> NULL(NULL[0]), strLine1(BANK0[17]), 

    ultoa@buf	PTR unsigned char  size(2) Largest target is 20
		 -> capacity(BANK0[20]), 

    sp__ultoa	PTR unsigned char  size(2) Largest target is 20
		 -> capacity(BANK0[20]), 

    ltoa@buf	PTR unsigned char  size(2) Largest target is 20
		 -> capacity(BANK0[20]), 

    ltoa@cp	PTR unsigned char  size(2) Largest target is 20
		 -> capacity(BANK0[20]), 

    writeLCD@str	PTR const unsigned char  size(2) Largest target is 17
		 -> STR_3(CODE[6]), STR_2(CODE[6]), strLine1(BANK0[17]), 

    sp__strcat	PTR unsigned char  size(2) Largest target is 17
		 -> NULL(NULL[0]), strLine1(BANK0[17]), 

    iterLine1	PTR unsigned char  size(2) Largest target is 17
		 -> NULL(NULL[0]), strLine1(BANK0[17]), 

    sp__ltoa	PTR unsigned char  size(2) Largest target is 20
		 -> capacity(BANK0[20]), 


Critical Paths under _main in COMRAM

    _main->_ltoa
    _ltoa->_ultoa
    _ultoa->___lldiv
    _initLCD->_writeLCD
    _writeLCD->_writeDataLCD
    _writeDataLCD->_waitNotBusy
    _waitForLCDStart->_writeCmdLCD
    _line2->_writeCmdLCD
    _line1->_writeCmdLCD
    _writeCmdLCD->_waitNotBusy

Critical Paths under _high_isr in COMRAM

    None.

Critical Paths under _low_isr in COMRAM

    None.

Critical Paths under _main in BANK0

    _main->_ltoa

Critical Paths under _high_isr in BANK0

    None.

Critical Paths under _low_isr in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _high_isr in BANK1

    None.

Critical Paths under _low_isr in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _high_isr in BANK2

    None.

Critical Paths under _low_isr in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _high_isr in BANK3

    None.

Critical Paths under _low_isr in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _high_isr in BANK4

    None.

Critical Paths under _low_isr in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _high_isr in BANK5

    None.

Critical Paths under _low_isr in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _high_isr in BANK6

    None.

Critical Paths under _low_isr in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _high_isr in BANK7

    None.

Critical Paths under _low_isr in BANK7

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 7     7      0    2857
                                             59 COMRAM     3     3      0
                                              8 BANK0      4     4      0
                            _InitApp
                              _line1
                               _ltoa
                             _strcat
                             _strlen
                           _writeLCD
 ---------------------------------------------------------------------------------
 (1) _strlen                                               6     4      2     154
                                             31 COMRAM     6     4      2
 ---------------------------------------------------------------------------------
 (1) _strcat                                               6     2      4     354
                                             31 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (1) _ltoa                                                10     2      8    1553
                                             57 COMRAM     2     2      0
                                              0 BANK0      8     0      8
                              _ultoa
 ---------------------------------------------------------------------------------
 (2) _ultoa                                               13     5      8    1198
                                             44 COMRAM    13     5      8
                            ___lldiv
                            ___llmod
 ---------------------------------------------------------------------------------
 (3) ___llmod                                              9     1      8     287
                                             31 COMRAM     9     1      8
 ---------------------------------------------------------------------------------
 (3) ___lldiv                                             13     5      8     418
                                             31 COMRAM    13     5      8
 ---------------------------------------------------------------------------------
 (1) _InitApp                                              0     0      0     421
                            _initLCD
 ---------------------------------------------------------------------------------
 (2) _initLCD                                              0     0      0     421
                              _line1
                              _line2
                    _waitForLCDStart
                           _writeLCD
 ---------------------------------------------------------------------------------
 (1) _writeLCD                                             2     0      2     283
                                             33 COMRAM     2     0      2
                       _writeDataLCD
 ---------------------------------------------------------------------------------
 (2) _writeDataLCD                                         1     1      0      46
                                             32 COMRAM     1     1      0
                        _waitNotBusy
 ---------------------------------------------------------------------------------
 (3) _waitForLCDStart                                      1     1      0      46
                                             33 COMRAM     1     1      0
                        _writeCmdLCD
 ---------------------------------------------------------------------------------
 (3) _line2                                                0     0      0      46
                        _writeCmdLCD
 ---------------------------------------------------------------------------------
 (1) _line1                                                0     0      0      46
                        _writeCmdLCD
 ---------------------------------------------------------------------------------
 (2) _writeCmdLCD                                          1     1      0      46
                                             32 COMRAM     1     1      0
                        _waitNotBusy
 ---------------------------------------------------------------------------------
 (3) _waitNotBusy                                          1     1      0      24
                                             31 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (6) _low_isr                                             17    17      0       0
                                              0 COMRAM    17    17      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (7) _high_isr                                            14    14      0       0
                                             17 COMRAM    14    14      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 7
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _InitApp
     _initLCD
       _line1
         _writeCmdLCD
           _waitNotBusy
       _line2
         _writeCmdLCD
           _waitNotBusy
       _waitForLCDStart
         _writeCmdLCD
           _waitNotBusy
       _writeLCD
         _writeDataLCD
           _waitNotBusy
   _line1
     _writeCmdLCD
       _waitNotBusy
   _ltoa
     _ultoa
       ___lldiv
       ___llmod
   _strcat
   _strlen
   _writeLCD
     _writeDataLCD
       _waitNotBusy

 _low_isr (ROOT)

 _high_isr (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             7FF      0       0      21        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0      C      38       5       35.0%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     3E      3E       1       66.0%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      76      20        0.0%
DATA                 0      0      76       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.35 build -356382666 
Symbol Table                                                                                   Tue Oct 20 16:42:21 2015

                       _i 0066                        l40 082A                        bsr 000FE0  
                     l533 09FA                       l476 0A8E                       l486 0B62  
                     u410 0BC2                       u260 0C46                       u270 0C6E  
                     u417 0BB8                       u507 0C9A                       u267 0C3C  
                     u517 0CAA                       u277 0C64                       u477 0822  
                     u487 0C7C                       u497 0C8E              __CFG_BOR$OFF 000000  
                     wreg 000FE8              __CFG_FOSC$HS 000000              __CFG_LVP$OFF 000000  
        ?_waitForLCDStart 0001              __CFG_WDT$OFF 000000                      l1105 0A40  
                    l1107 0A4C                      l1045 0D6A                      l1037 0D5E  
                    l1117 0A80                      l1109 0A50                      l1133 0B54  
                    l1125 0B20                      l1213 0BFE                      l1221 0CC8  
                    l1127 0B2C                      l1231 0B82                      l1129 0B30  
                    l1233 0B92                      l1083 0C4E                      l1163 0938  
                    l1235 0B9A                      l1219 0CC4                      l1173 0990  
                    l1229 0B7E                      l1079 0C26                      l1239 0818  
                    l1265 08CE                      l1259 08B8                      STR_1 080D  
                    STR_2 0801                      STR_3 0807                      _main 0814  
                    _ltoa 0BCC                      fsr0h 000FEA                      fsr1h 000FE2  
                    indf0 000FEF                      fsr0l 000FE9                      fsr2h 000FDA  
                    fsr1l 000FE1                      indf2 000FDF                      fsr2l 000FD9  
                    btemp 003F                      pclat 000FFA                      prodh 000FF4  
                    prodl 000FF3                      start 00A6             __CFG_IESO$OFF 000000  
           __CFG_MCLRE$ON 000000              ___param_bank 000010           __end_of_InitApp 0D54  
             _writeCmdLCD 0DA6                     ?_main 0001                     _ADRES 000FC3  
                   ?_ltoa 008C           __end_of___lldiv 0AA0           __end_of___llmod 0B74  
                   _PORTD 000F83                     _TRISD 000F95             __CFG_PWRT$OFF 000000  
          __CFG_FCMEN$OFF 000000           __end_of_initLCD 0D2A                     _line1 0DC2  
                   _line2 0DBA                     _ultoa 0928     __size_of_writeDataLCD 0014  
         __end_of_low_isr 00A6                     tablat 000FF5                     status 000FD8  
         __initialization 0D78              __end_of_main 0928              __end_of_ltoa 0C24  
                  ??_main 003C                    ??_ltoa 003A             __activetblptr 000002  
            _writeDataLCD 0D92                    ?_line1 0001                    ?_line2 0001  
        ___llmod@dividend 0020                    ?_ultoa 002D                    _TRISE0 007CB0  
                  _TRISE1 007CB1                    _TRISE2 007CB2                 ??_InitApp 0024  
          __CFG_XINST$OFF 000000          __end_of_high_isr 0B0E              ?_waitNotBusy 0001  
               ??___lldiv 0028                 ??___llmod 0028                    clear_0 0D7E  
                  _totCur 0060                    _strcat 0B74                    _strlen 0CBA  
               ??_initLCD 0024                    ltoa@cp 003A              __mediumconst 0000  
               ??_low_isr 0001                    tblptrh 000FF7                    tblptrl 000FF6  
                  tblptru 000FF8                    ultoa@c 0039                    ultoa@v 0035  
        __end_of_writeLCD 0C76                __accesstop 0060   __end_of__initialization 0D84  
           ___rparam_used 000001            __pcstackCOMRAM 0001             __end_of_line1 0DCA  
           __end_of_line2 0DC2             __end_of_ultoa 0A1E                   ??_line1 0022  
                 ??_line2 0022          writeDataLCD@data 0021                   ??_ultoa 0035  
              __pbssBANK0 0060              ?_writeCmdLCD 0001                   ?_strcat 0020  
                 ?_strlen 0020                 ?_high_isr 0001           __CFG_VREGEN$OFF 000000  
                 _InitApp 0D2A  __size_of_waitForLCDStart 0044                   __Hparam 0000  
                 __Lparam 0000                   ___lldiv 0A1E                   ___llmod 0B0E  
            __psmallconst 0800      __size_of_waitNotBusy 0024           __CFG_STVREN$OFF 000000  
                 __pcinit 0D78                   __ramtop 0800                 ?_writeLCD 0022  
                 __ptext0 0814                   __ptext1 0CBA                   __ptext2 0B74  
                 __ptext3 0BCC                   __ptext4 0928                   __ptext5 0B0E  
                 __ptext6 0A1E                   __ptext7 0D2A                   __ptext8 0CF4  
                 __ptext9 0C24           __size_of_strcat 0058           __size_of_strlen 003A  
                 _initLCD 0CF4                   _low_isr 0018                ??_high_isr 0012  
          __pintcode_body 0AA0      end_of_initialization 0D84             __Lmediumconst 0000  
                 int_func 0AA0                   ltoa@buf 008C                   ltoa@val 008E  
         ___lldiv@divisor 0024           ___lldiv@counter 002C                   postinc0 000FEE  
                 strlen@s 0020                ??_writeLCD 0024                 _PORTDbits 000F83  
              main@lenCap 0094            waitNotBusy@res 0020         ??_waitForLCDStart 0022  
    __size_of_writeCmdLCD 0014            __end_of_strcat 0BCC            __end_of_strlen 0CF4  
     start_initialization 0D78           ___llmod@divisor 0024           ___llmod@counter 0028  
        __CFG_LPT1OSC$OFF 000000           writeCmdLCD@data 0021                  ??_strcat 0024  
                ??_strlen 0022             __pcstackBANK0 008C         __size_of_high_isr 0B06  
                ?_InitApp 0001                 __pintcode 0008                  ?___lldiv 0020  
                ?___llmod 0020               __pintcodelo 0018                  ?_initLCD 0001  
             __smallconst 0800             ?_writeDataLCD 0001         __size_of_writeLCD 0052  
                ?_low_isr 0001            __size_of_line1 0008            __size_of_line2 0008  
               _iterLine1 0064               writeLCD@str 0022            __size_of_ultoa 00F6  
                _LATEbits 000F8D                  _PIR1bits 000F9E             ??_waitNotBusy 0020  
              _ADCON0bits 000FC2                _ADCON1bits 000FC1                _ADCON2bits 000FC0  
          ??_writeDataLCD 0021                 main@width 0096           _waitForLCDStart 0C76  
        __size_of_InitApp 002A                  __Hrparam 0000                  __Lrparam 0000  
        __size_of___lldiv 0082          __size_of___llmod 0066       __end_of_waitNotBusy 0D78  
                _capacity 0067          __size_of_initLCD 0036                strcat@from 0022  
        __size_of_low_isr 008E                  __ptext10 0D92                  __ptext11 0C76  
                __ptext12 0DBA                  __ptext13 0DC2                  __ptext14 0DA6  
                __ptext15 0D54                  _high_isr 0008             __size_of_main 0114  
           __size_of_ltoa 0058                  int$flags 003F                  _strLine1 007B  
           ??_writeCmdLCD 0021                  _writeLCD 0C24                 ultoa@base 0033  
 __end_of_waitForLCDStart 0CBA                  intlevel1 0000                  intlevel2 0000  
                ltoa@base 0092          ___lldiv@dividend 0020      __end_of_writeDataLCD 0DA6  
             _waitNotBusy 0D54                  ultoa@buf 002D                  ultoa@val 002F  
                strcat@cp 0024                  strcat@to 0020          ___lldiv@quotient 0028  
     __end_of_writeCmdLCD 0DBA                  strlen@cp 0024  
